
LED Sequence V3.0 MISRA compliant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091f  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00000bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042c  00000000  00000000  0000120b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ab  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "APP/app.h"

int main(void)
{ 
	DIO_InitPin(PB,0,OUTPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 41 00 	call	0x82	; 0x82 <DIO_InitPin>
	DIO_WritePin(PB,0,HIGH);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 43 00 	call	0x86	; 0x86 <DIO_WritePin>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <DIO_InitPin>:
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;

    }
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	08 95       	ret

00000086 <DIO_WritePin>:
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
	    if (port<PIN_MAX)
  86:	88 30       	cpi	r24, 0x08	; 8
  88:	08 f0       	brcs	.+2      	; 0x8c <DIO_WritePin+0x6>
  8a:	79 c0       	rjmp	.+242    	; 0x17e <DIO_WritePin+0xf8>
	    {
		    switch (volt)
  8c:	44 23       	and	r20, r20
  8e:	d9 f1       	breq	.+118    	; 0x106 <DIO_WritePin+0x80>
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	09 f0       	breq	.+2      	; 0x96 <DIO_WritePin+0x10>
  94:	76 c0       	rjmp	.+236    	; 0x182 <DIO_WritePin+0xfc>
		    {
			    case HIGH:

			    switch(port)
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	91 f0       	breq	.+36     	; 0xbe <DIO_WritePin+0x38>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_WritePin+0x20>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	d9 f0       	breq	.+54     	; 0xd6 <DIO_WritePin+0x50>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	29 f1       	breq	.+74     	; 0xee <DIO_WritePin+0x68>
  a4:	70 c0       	rjmp	.+224    	; 0x186 <DIO_WritePin+0x100>
			    {
				    case PA:

				    SET_BIT(PORTA,u8_PinNumber);
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_WritePin+0x2c>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_WritePin+0x28>
  b6:	82 2b       	or	r24, r18
  b8:	8b bb       	out	0x1b, r24	; 27
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
  ba:	80 e0       	ldi	r24, 0x00	; 0
			    switch(port)
			    {
				    case PA:

				    SET_BIT(PORTA,u8_PinNumber);
				    break;
  bc:	08 95       	ret
				    case PB:

				    SET_BIT(PORTB,u8_PinNumber);
  be:	28 b3       	in	r18, 0x18	; 24
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WritePin+0x44>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WritePin+0x40>
  ce:	82 2b       	or	r24, r18
  d0:	88 bb       	out	0x18, r24	; 24
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
  d2:	80 e0       	ldi	r24, 0x00	; 0
				    SET_BIT(PORTA,u8_PinNumber);
				    break;
				    case PB:

				    SET_BIT(PORTB,u8_PinNumber);
				    break;
  d4:	08 95       	ret
				    case PC:

				    SET_BIT(PORTC,u8_PinNumber);
  d6:	25 b3       	in	r18, 0x15	; 21
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_WritePin+0x5c>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_WritePin+0x58>
  e6:	82 2b       	or	r24, r18
  e8:	85 bb       	out	0x15, r24	; 21
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
  ea:	80 e0       	ldi	r24, 0x00	; 0
				    SET_BIT(PORTB,u8_PinNumber);
				    break;
				    case PC:

				    SET_BIT(PORTC,u8_PinNumber);
				    break;
  ec:	08 95       	ret
				    case PD:

				    SET_BIT(PORTD,u8_PinNumber);
  ee:	22 b3       	in	r18, 0x12	; 18
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_WritePin+0x74>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_WritePin+0x70>
  fe:	82 2b       	or	r24, r18
 100:	82 bb       	out	0x12, r24	; 18
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
 102:	80 e0       	ldi	r24, 0x00	; 0
				    SET_BIT(PORTC,u8_PinNumber);
				    break;
				    case PD:

				    SET_BIT(PORTD,u8_PinNumber);
				    break;
 104:	08 95       	ret
			    }
			    break;

			    case LOW:

			    switch(port)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	99 f0       	breq	.+38     	; 0x130 <DIO_WritePin+0xaa>
 10a:	28 f0       	brcs	.+10     	; 0x116 <DIO_WritePin+0x90>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	e9 f0       	breq	.+58     	; 0x14a <DIO_WritePin+0xc4>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	41 f1       	breq	.+80     	; 0x164 <DIO_WritePin+0xde>
 114:	3a c0       	rjmp	.+116    	; 0x18a <DIO_WritePin+0x104>
			    {
				    case PA:

				    CLR_BIT(PORTA,u8_PinNumber);
 116:	2b b3       	in	r18, 0x1b	; 27
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_WritePin+0x9c>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_WritePin+0x98>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	8b bb       	out	0x1b, r24	; 27
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
			    switch(port)
			    {
				    case PA:

				    CLR_BIT(PORTA,u8_PinNumber);
				    break;
 12e:	08 95       	ret
				    case PB:

				    CLR_BIT(PORTB,u8_PinNumber);
 130:	28 b3       	in	r18, 0x18	; 24
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_WritePin+0xb6>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_WritePin+0xb2>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	88 bb       	out	0x18, r24	; 24
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTA,u8_PinNumber);
				    break;
				    case PB:

				    CLR_BIT(PORTB,u8_PinNumber);
				    break;
 148:	08 95       	ret
				    case PC:

				    CLR_BIT(PORTC,u8_PinNumber);
 14a:	25 b3       	in	r18, 0x15	; 21
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritePin+0xd0>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritePin+0xcc>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	85 bb       	out	0x15, r24	; 21
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
 160:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTB,u8_PinNumber);
				    break;
				    case PC:

				    CLR_BIT(PORTC,u8_PinNumber);
				    break;
 162:	08 95       	ret
				    case PD:

				    CLR_BIT(PORTD,u8_PinNumber);
 164:	22 b3       	in	r18, 0x12	; 18
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_WritePin+0xea>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_WritePin+0xe6>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	82 bb       	out	0x12, r24	; 18
	    return error;

    }
    en_dioError_t  DIO_WritePin (DIO_Port_type port, u8 u8_PinNumber, DIO_PinVoltage_type volt)		
    {
	    en_dioError_t error= DIO_OK;
 17a:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTC,u8_PinNumber);
				    break;
				    case PD:

				    CLR_BIT(PORTD,u8_PinNumber);
				    break;
 17c:	08 95       	ret

		    }
	    }
	    else
	    {
		    error = WRONG_PinNumber;
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	08 95       	ret
			    }

			    break;

			    default:
			    error = WRONG_VALUE;
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	08 95       	ret
				    case PD:

				    SET_BIT(PORTD,u8_PinNumber);
				    break;
				    default:
				    error = WRONG_PortNumber;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
				    case PD:

				    CLR_BIT(PORTD,u8_PinNumber);
				    break;
				    default:
				    error = WRONG_PortNumber;
 18a:	81 e0       	ldi	r24, 0x01	; 1
	    else
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;
    }
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
