
LED Sequence V3.0 MISRA compliant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000d90  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800066  00800066  00000e2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a7f  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c20  00000000  00000000  00002b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001025  00000000  00000000  0000372f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00004754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a72  00000000  00000000  00004c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001120  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000679a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_1>
   8:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_2>
   c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  8a:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_leds_mode>:

void set_leds_mode (void)
{  
	static u16 leds_mode=0;
	
	if (leds_mode==7)
  92:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  96:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  9a:	87 30       	cpi	r24, 0x07	; 7
  9c:	91 05       	cpc	r25, r1
  9e:	99 f4       	brne	.+38     	; 0xc6 <set_leds_mode+0x34>
	{
		CLR_BIT(LEDS_NUM,leds_mode);
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	a9 01       	movw	r20, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <set_leds_mode+0x1a>
  a8:	44 0f       	add	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <set_leds_mode+0x16>
  b0:	ca 01       	movw	r24, r20
  b2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <LEDS_NUM>
  b6:	80 95       	com	r24
  b8:	89 23       	and	r24, r25
  ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LEDS_NUM>
		leds_mode=0;
  be:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
  c2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
	}

	if ( leds_mode<=3)
  c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  ca:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	91 05       	cpc	r25, r1
  d2:	80 f4       	brcc	.+32     	; 0xf4 <set_leds_mode+0x62>
	{
		LEDS_NUM|=(1<<(4+leds_mode));
  d4:	ac 01       	movw	r20, r24
  d6:	4c 5f       	subi	r20, 0xFC	; 252
  d8:	5f 4f       	sbci	r21, 0xFF	; 255
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <set_leds_mode+0x52>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	4a 95       	dec	r20
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <set_leds_mode+0x4e>
  e8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <LEDS_NUM>
  ec:	23 2b       	or	r18, r19
  ee:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <LEDS_NUM>
  f2:	11 c0       	rjmp	.+34     	; 0x116 <set_leds_mode+0x84>
	
		
		
	}
	else if ( leds_mode>3)
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	70 f0       	brcs	.+28     	; 0x116 <set_leds_mode+0x84>
	{
		CLR_BIT(LEDS_NUM,leds_mode);
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	08 2e       	mov	r0, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <set_leds_mode+0x74>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <set_leds_mode+0x70>
 10a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <LEDS_NUM>
 10e:	20 95       	com	r18
 110:	23 23       	and	r18, r19
 112:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <LEDS_NUM>
	}

	leds_mode++;
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 11c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 120:	08 95       	ret

00000122 <app_init>:



 void app_init(void)
 { 
	 GLOBALE_ENABLE();
 122:	78 94       	sei
	 TIMER0_Init(TIMER0_NORMAL_MODE);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 c6 03 	call	0x78c	; 0x78c <TIMER0_Init>
	 TIMER0_OV_InterruptEnable();
 12a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <TIMER0_OV_InterruptEnable>
	 TIMER0_OV_SetCallBack(timer_flag);
 12e:	8e e7       	ldi	r24, 0x7E	; 126
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <TIMER0_OV_SetCallBack>
     LED_init(LED1);
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_init>
	 LED_init(LED2);
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_init>
	 LED_init(LED3);
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_init>
	 LED_init(LED4);
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_init>
	 BUTTON_init(PC,button1);
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 3e 01 	call	0x27c	; 0x27c <BUTTON_init>
	 BUTTON_init(PB,button2);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 3e 01 	call	0x27c	; 0x27c <BUTTON_init>
	 	  	EXI_Enable(EX_INT2);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 c4 02 	call	0x588	; 0x588 <EXI_Enable>
	 	  	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 d6 02 	call	0x5ac	; 0x5ac <EXI_TriggerEdge>
	 	  	EXI_SetCallBack(EX_INT2,set_leds_mode);
 16c:	69 e4       	ldi	r22, 0x49	; 73
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 36 03 	call	0x66c	; 0x66c <EXI_SetCallBack>
	 	  	
PORTB=0;
 176:	18 ba       	out	0x18, r1	; 24
 178:	08 95       	ret

0000017a <LEDS_N_Check>:

	  	
 }
 
  void LEDS_N_Check ()
  {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	1f 92       	push	r1
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	  u8 states;
	  BUTTON_read(PC,4,&states);
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 4b 01 	call	0x296	; 0x296 <BUTTON_read>
	  if (states==HIGH)
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	81 f4       	brne	.+32     	; 0x1b8 <LEDS_N_Check+0x3e>
	  { 
       blinking_time_mode++;
 198:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <blinking_time_mode>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blinking_time_mode>

		  
		  while(states==HIGH)
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <LEDS_N_Check+0x38>
		  {
			  BUTTON_read(PC,4,&states);
 1a4:	ae 01       	movw	r20, r28
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 4b 01 	call	0x296	; 0x296 <BUTTON_read>
	  if (states==HIGH)
	  { 
       blinking_time_mode++;

		  
		  while(states==HIGH)
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	b1 f3       	breq	.-20     	; 0x1a4 <LEDS_N_Check+0x2a>
		  {
			  BUTTON_read(PC,4,&states);
		  }
	  }
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <set_blinking_t_mode>:
}


void set_blinking_t_mode (void)
{  
	 LEDS_N_Check();
 1c0:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_N_Check>
	switch (blinking_time_mode)
 1c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <blinking_time_mode>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	09 f1       	breq	.+66     	; 0x20e <set_blinking_t_mode+0x4e>
 1cc:	28 f4       	brcc	.+10     	; 0x1d8 <set_blinking_t_mode+0x18>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <set_blinking_t_mode+0x22>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	89 f0       	breq	.+34     	; 0x1f8 <set_blinking_t_mode+0x38>
 1d6:	3a c0       	rjmp	.+116    	; 0x24c <set_blinking_t_mode+0x8c>
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	21 f1       	breq	.+72     	; 0x224 <set_blinking_t_mode+0x64>
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	59 f1       	breq	.+86     	; 0x236 <set_blinking_t_mode+0x76>
 1e0:	35 c0       	rjmp	.+106    	; 0x24c <set_blinking_t_mode+0x8c>
	{
		case 1:	blinking_times.ton =  100;       blinking_times.toff=900;   //blinking_time_mode++;
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	91 83       	std	Z+1, r25	; 0x01
 1ec:	80 83       	st	Z, r24
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	93 e0       	ldi	r25, 0x03	; 3
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
		break;
 1f6:	08 95       	ret
		case 2:	blinking_times.ton  = 200;	     blinking_times.toff=800;  //blinking_time_mode++;
 1f8:	e0 e6       	ldi	r30, 0x60	; 96
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	88 ec       	ldi	r24, 0xC8	; 200
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	91 83       	std	Z+1, r25	; 0x01
 202:	80 83       	st	Z, r24
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	93 83       	std	Z+3, r25	; 0x03
 20a:	82 83       	std	Z+2, r24	; 0x02
		break;
 20c:	08 95       	ret
		case 3:	blinking_times.ton  = 300;	     blinking_times.toff=700;  //blinking_time_mode++;
 20e:	e0 e6       	ldi	r30, 0x60	; 96
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	8c e2       	ldi	r24, 0x2C	; 44
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	80 83       	st	Z, r24
 21a:	8c eb       	ldi	r24, 0xBC	; 188
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	93 83       	std	Z+3, r25	; 0x03
 220:	82 83       	std	Z+2, r24	; 0x02
		break;
 222:	08 95       	ret
		case 4:	blinking_times.ton  = 500;	     blinking_times.toff=500;  //blinking_time_mode++;
 224:	e0 e6       	ldi	r30, 0x60	; 96
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	84 ef       	ldi	r24, 0xF4	; 244
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	80 83       	st	Z, r24
 230:	93 83       	std	Z+3, r25	; 0x03
 232:	82 83       	std	Z+2, r24	; 0x02
		break;
 234:	08 95       	ret
		case 5:	blinking_times.ton  = 800;	     blinking_times.toff=200;  //blinking_time_mode++;
 236:	e0 e6       	ldi	r30, 0x60	; 96
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
 242:	88 ec       	ldi	r24, 0xC8	; 200
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	93 83       	std	Z+3, r25	; 0x03
 248:	82 83       	std	Z+2, r24	; 0x02
		break;
 24a:	08 95       	ret
		default:blinking_times.ton =  100;       blinking_times.toff=900; ;
 24c:	e0 e6       	ldi	r30, 0x60	; 96
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	91 83       	std	Z+1, r25	; 0x01
 256:	80 83       	st	Z, r24
 258:	84 e8       	ldi	r24, 0x84	; 132
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	93 83       	std	Z+3, r25	; 0x03
 25e:	82 83       	std	Z+2, r24	; 0x02
 260:	08 95       	ret

00000262 <app_start_v3>:
{
	while(1)
	{   
       
		
		LEDS_blink(LEDS_NUM,blinking_times.ton,blinking_times.toff);
 262:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LEDS_NUM>
 266:	e0 e6       	ldi	r30, 0x60	; 96
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	42 81       	ldd	r20, Z+2	; 0x02
 26c:	53 81       	ldd	r21, Z+3	; 0x03
 26e:	60 81       	ld	r22, Z
 270:	71 81       	ldd	r23, Z+1	; 0x01
 272:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LEDS_blink>
		set_blinking_t_mode();
 276:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <set_blinking_t_mode>
 27a:	f3 cf       	rjmp	.-26     	; 0x262 <app_start_v3>

0000027c <BUTTON_init>:
 #include "button.h"
en_buttonError_t BUTTON_init( DIO_Port_type port, u8 u8_PinNumber)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (u8_PinNumber <PIN_MAX && port<PORT_MAX)
 27c:	68 30       	cpi	r22, 0x08	; 8
 27e:	38 f4       	brcc	.+14     	; 0x28e <BUTTON_init+0x12>
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	38 f4       	brcc	.+14     	; 0x292 <BUTTON_init+0x16>
	{    
				DIO_InitPin(port,u8_PinNumber,INFREE);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_InitPin>
				error = BUTTON_OK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
	}
	else
	{
              error = WRONG_BUTTON_PIN;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	08 95       	ret
 292:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
}
 294:	08 95       	ret

00000296 <BUTTON_read>:

en_buttonError_t BUTTON_read(DIO_Port_type port, u8 u8_PinNumber , DIO_PinVoltage_type *buttonState)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (u8_PinNumber <PIN_MAX && port<PORT_MAX)
 296:	68 30       	cpi	r22, 0x08	; 8
 298:	30 f4       	brcc	.+12     	; 0x2a6 <BUTTON_read+0x10>
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	30 f4       	brcc	.+12     	; 0x2aa <BUTTON_read+0x14>
	{
		DIO_ReadPin(port,u8_PinNumber,buttonState);
 29e:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_ReadPin>
		error = BUTTON_OK;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
	}
	else
	{
		error = WRONG_BUTTON_PIN;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	08 95       	ret
 2aa:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
} 
 2ac:	08 95       	ret

000002ae <LED_init>:
{
	LED_on(LED_N);
	timer_delay(on_t);
	LED_on(LED_N);
	timer_delay(off_t);
}
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	68 2f       	mov	r22, r24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_InitPin>
 2b8:	08 95       	ret

000002ba <LEDS_blink>:
void LEDS_blink( u8 ledS_PINS , u16 on_t, u16 off_t)
{  
	if (gblink_state==1&&ledS_PINS>0)
 2ba:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <gblink_state>
 2be:	91 30       	cpi	r25, 0x01	; 1
 2c0:	79 f4       	brne	.+30     	; 0x2e0 <LEDS_blink+0x26>
 2c2:	88 23       	and	r24, r24
 2c4:	69 f0       	breq	.+26     	; 0x2e0 <LEDS_blink+0x26>
	{    
			PORTB = ledS_PINS;
 2c6:	88 bb       	out	0x18, r24	; 24
			timer_delay(on_t);
 2c8:	cb 01       	movw	r24, r22
 2ca:	0e 94 57 04 	call	0x8ae	; 0x8ae <timer_delay>
			timer_start(TIMER0_SCALER_8);
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 ed 03 	call	0x7da	; 0x7da <timer_start>
			gblink_state++;
 2d4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gblink_state>
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gblink_state>
 2de:	08 95       	ret
	}
   else if(gblink_state==3)
 2e0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <gblink_state>
 2e4:	93 30       	cpi	r25, 0x03	; 3
 2e6:	49 f4       	brne	.+18     	; 0x2fa <LEDS_blink+0x40>
   {
	PORTB=0;
 2e8:	18 ba       	out	0x18, r1	; 24
	timer_delay(off_t);
 2ea:	ca 01       	movw	r24, r20
 2ec:	0e 94 57 04 	call	0x8ae	; 0x8ae <timer_delay>
	timer_start(TIMER0_SCALER_8);
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 ed 03 	call	0x7da	; 0x7da <timer_start>
	gblink_state=0;
 2f6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gblink_state>
 2fa:	08 95       	ret

000002fc <timer_flag>:
} 

void timer_flag()
{  
	
	gblink_state++;
 2fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gblink_state>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gblink_state>
	timer0_stop();
 306:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <timer0_stop>
 30a:	08 95       	ret

0000030c <main>:
static volatile u8 gblink_state2=1;

int main(void)
{ 
	
    app_init();
 30c:	0e 94 91 00 	call	0x122	; 0x122 <app_init>
    app_start_v3();
 310:	0e 94 31 01 	call	0x262	; 0x262 <app_start_v3>

	
}
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	08 95       	ret

0000031a <DIO_InitPin>:
	    else
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;
    }
 31a:	68 30       	cpi	r22, 0x08	; 8
 31c:	08 f0       	brcs	.+2      	; 0x320 <DIO_InitPin+0x6>
 31e:	ec c0       	rjmp	.+472    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	09 f4       	brne	.+2      	; 0x326 <DIO_InitPin+0xc>
 324:	51 c0       	rjmp	.+162    	; 0x3c8 <DIO_InitPin+0xae>
 326:	20 f0       	brcs	.+8      	; 0x330 <DIO_InitPin+0x16>
 328:	42 30       	cpi	r20, 0x02	; 2
 32a:	09 f4       	brne	.+2      	; 0x32e <DIO_InitPin+0x14>
 32c:	99 c0       	rjmp	.+306    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 32e:	e6 c0       	rjmp	.+460    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	b9 f0       	breq	.+46     	; 0x362 <DIO_InitPin+0x48>
 334:	28 f0       	brcs	.+10     	; 0x340 <DIO_InitPin+0x26>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	29 f1       	breq	.+74     	; 0x384 <DIO_InitPin+0x6a>
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	a1 f1       	breq	.+104    	; 0x3a6 <DIO_InitPin+0x8c>
 33e:	e0 c0       	rjmp	.+448    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 340:	2a b3       	in	r18, 0x1a	; 26
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_InitPin+0x32>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_InitPin+0x2e>
 350:	92 2f       	mov	r25, r18
 352:	98 2b       	or	r25, r24
 354:	9a bb       	out	0x1a, r25	; 26
 356:	9b b3       	in	r25, 0x1b	; 27
 358:	80 95       	com	r24
 35a:	89 23       	and	r24, r25
 35c:	8b bb       	out	0x1b, r24	; 27
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret
 362:	27 b3       	in	r18, 0x17	; 23
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_InitPin+0x54>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_InitPin+0x50>
 372:	92 2f       	mov	r25, r18
 374:	98 2b       	or	r25, r24
 376:	97 bb       	out	0x17, r25	; 23
 378:	98 b3       	in	r25, 0x18	; 24
 37a:	80 95       	com	r24
 37c:	89 23       	and	r24, r25
 37e:	88 bb       	out	0x18, r24	; 24
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
 384:	24 b3       	in	r18, 0x14	; 20
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_InitPin+0x76>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_InitPin+0x72>
 394:	92 2f       	mov	r25, r18
 396:	98 2b       	or	r25, r24
 398:	94 bb       	out	0x14, r25	; 20
 39a:	95 b3       	in	r25, 0x15	; 21
 39c:	80 95       	com	r24
 39e:	89 23       	and	r24, r25
 3a0:	85 bb       	out	0x15, r24	; 21
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	21 b3       	in	r18, 0x11	; 17
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_InitPin+0x98>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_InitPin+0x94>
 3b6:	92 2f       	mov	r25, r18
 3b8:	98 2b       	or	r25, r24
 3ba:	91 bb       	out	0x11, r25	; 17
 3bc:	92 b3       	in	r25, 0x12	; 18
 3be:	80 95       	com	r24
 3c0:	89 23       	and	r24, r25
 3c2:	82 bb       	out	0x12, r24	; 18
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	b9 f0       	breq	.+46     	; 0x3fa <DIO_InitPin+0xe0>
 3cc:	28 f0       	brcs	.+10     	; 0x3d8 <DIO_InitPin+0xbe>
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	29 f1       	breq	.+74     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	a1 f1       	breq	.+104    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3d6:	96 c0       	rjmp	.+300    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 3d8:	2a b3       	in	r18, 0x1a	; 26
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_InitPin+0xca>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_InitPin+0xc6>
 3e8:	80 95       	com	r24
 3ea:	92 2f       	mov	r25, r18
 3ec:	98 23       	and	r25, r24
 3ee:	9a bb       	out	0x1a, r25	; 26
 3f0:	9b b3       	in	r25, 0x1b	; 27
 3f2:	89 23       	and	r24, r25
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	27 b3       	in	r18, 0x17	; 23
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	92 2f       	mov	r25, r18
 40e:	98 23       	and	r25, r24
 410:	97 bb       	out	0x17, r25	; 23
 412:	98 b3       	in	r25, 0x18	; 24
 414:	89 23       	and	r24, r25
 416:	88 bb       	out	0x18, r24	; 24
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
 41c:	24 b3       	in	r18, 0x14	; 20
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	80 95       	com	r24
 42e:	92 2f       	mov	r25, r18
 430:	98 23       	and	r25, r24
 432:	94 bb       	out	0x14, r25	; 20
 434:	95 b3       	in	r25, 0x15	; 21
 436:	89 23       	and	r24, r25
 438:	85 bb       	out	0x15, r24	; 21
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	21 b3       	in	r18, 0x11	; 17
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	92 2f       	mov	r25, r18
 452:	98 23       	and	r25, r24
 454:	91 bb       	out	0x11, r25	; 17
 456:	92 b3       	in	r25, 0x12	; 18
 458:	89 23       	and	r24, r25
 45a:	82 bb       	out	0x12, r24	; 18
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	b9 f0       	breq	.+46     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 464:	28 f0       	brcs	.+10     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	29 f1       	breq	.+74     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	a1 f1       	breq	.+104    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 46e:	4c c0       	rjmp	.+152    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 470:	2a b3       	in	r18, 0x1a	; 26
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	98 2f       	mov	r25, r24
 482:	90 95       	com	r25
 484:	92 23       	and	r25, r18
 486:	9a bb       	out	0x1a, r25	; 26
 488:	9b b3       	in	r25, 0x1b	; 27
 48a:	89 2b       	or	r24, r25
 48c:	8b bb       	out	0x1b, r24	; 27
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
 492:	27 b3       	in	r18, 0x17	; 23
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	98 2f       	mov	r25, r24
 4a4:	90 95       	com	r25
 4a6:	92 23       	and	r25, r18
 4a8:	97 bb       	out	0x17, r25	; 23
 4aa:	98 b3       	in	r25, 0x18	; 24
 4ac:	89 2b       	or	r24, r25
 4ae:	88 bb       	out	0x18, r24	; 24
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
 4b4:	24 b3       	in	r18, 0x14	; 20
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4c4:	98 2f       	mov	r25, r24
 4c6:	90 95       	com	r25
 4c8:	92 23       	and	r25, r18
 4ca:	94 bb       	out	0x14, r25	; 20
 4cc:	95 b3       	in	r25, 0x15	; 21
 4ce:	89 2b       	or	r24, r25
 4d0:	85 bb       	out	0x15, r24	; 21
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	21 b3       	in	r18, 0x11	; 17
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4e6:	98 2f       	mov	r25, r24
 4e8:	90 95       	com	r25
 4ea:	92 23       	and	r25, r18
 4ec:	91 bb       	out	0x11, r25	; 17
 4ee:	92 b3       	in	r25, 0x12	; 18
 4f0:	89 2b       	or	r24, r25
 4f2:	82 bb       	out	0x12, r24	; 18
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	08 95       	ret
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 95       	ret
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	08 95       	ret

0000050c <DIO_ReadPin>:
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
	    if (u8_PinNumber <PIN_MAX )
 50c:	68 30       	cpi	r22, 0x08	; 8
 50e:	c0 f5       	brcc	.+112    	; 0x580 <DIO_ReadPin+0x74>
	    {

		    switch(port)
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	91 f0       	breq	.+36     	; 0x538 <DIO_ReadPin+0x2c>
 514:	28 f0       	brcs	.+10     	; 0x520 <DIO_ReadPin+0x14>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	d9 f0       	breq	.+54     	; 0x550 <DIO_ReadPin+0x44>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	29 f1       	breq	.+74     	; 0x568 <DIO_ReadPin+0x5c>
 51e:	32 c0       	rjmp	.+100    	; 0x584 <DIO_ReadPin+0x78>
		    {
			    case PA:

			    *volt=READ_BIT(PINA,u8_PinNumber);
 520:	89 b3       	in	r24, 0x19	; 25
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_ReadPin+0x1e>
 526:	95 95       	asr	r25
 528:	87 95       	ror	r24
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_ReadPin+0x1a>
 52e:	81 70       	andi	r24, 0x01	; 1
 530:	fa 01       	movw	r30, r20
 532:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 534:	80 e0       	ldi	r24, 0x00	; 0
		    switch(port)
		    {
			    case PA:

			    *volt=READ_BIT(PINA,u8_PinNumber);
			    break;
 536:	08 95       	ret
			    case PB:

			    *volt=READ_BIT(PINB,u8_PinNumber);
 538:	86 b3       	in	r24, 0x16	; 22
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_ReadPin+0x36>
 53e:	95 95       	asr	r25
 540:	87 95       	ror	r24
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_ReadPin+0x32>
 546:	81 70       	andi	r24, 0x01	; 1
 548:	fa 01       	movw	r30, r20
 54a:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 54c:	80 e0       	ldi	r24, 0x00	; 0
			    *volt=READ_BIT(PINA,u8_PinNumber);
			    break;
			    case PB:

			    *volt=READ_BIT(PINB,u8_PinNumber);
			    break;
 54e:	08 95       	ret
			    case PC:

			    *volt=READ_BIT(PINC,u8_PinNumber);
 550:	83 b3       	in	r24, 0x13	; 19
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_ReadPin+0x4e>
 556:	95 95       	asr	r25
 558:	87 95       	ror	r24
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_ReadPin+0x4a>
 55e:	81 70       	andi	r24, 0x01	; 1
 560:	fa 01       	movw	r30, r20
 562:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 564:	80 e0       	ldi	r24, 0x00	; 0
			    *volt=READ_BIT(PINB,u8_PinNumber);
			    break;
			    case PC:

			    *volt=READ_BIT(PINC,u8_PinNumber);
			    break;
 566:	08 95       	ret
			    case PD:

			    *volt=READ_BIT(PIND,u8_PinNumber);
 568:	80 b3       	in	r24, 0x10	; 16
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_ReadPin+0x66>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_ReadPin+0x62>
 576:	81 70       	andi	r24, 0x01	; 1
 578:	fa 01       	movw	r30, r20
 57a:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 57c:	80 e0       	ldi	r24, 0x00	; 0
			    *volt=READ_BIT(PINC,u8_PinNumber);
			    break;
			    case PD:

			    *volt=READ_BIT(PIND,u8_PinNumber);
			    break;
 57e:	08 95       	ret
		    }

	    }
	    else
	    {
		    error = WRONG_PinNumber;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	08 95       	ret
			    case PD:

			    *volt=READ_BIT(PIND,u8_PinNumber);
			    break;
			    default:
			    error = WRONG_PortNumber;
 584:	81 e0       	ldi	r24, 0x01	; 1
	    else
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;
    }
 586:	08 95       	ret

00000588 <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	41 f0       	breq	.+16     	; 0x59c <EXI_Enable+0x14>
 58c:	18 f0       	brcs	.+6      	; 0x594 <EXI_Enable+0xc>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	49 f0       	breq	.+18     	; 0x5a4 <EXI_Enable+0x1c>
 592:	08 95       	ret
 594:	8b b7       	in	r24, 0x3b	; 59
 596:	80 64       	ori	r24, 0x40	; 64
 598:	8b bf       	out	0x3b, r24	; 59
 59a:	08 95       	ret
 59c:	8b b7       	in	r24, 0x3b	; 59
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	8b bf       	out	0x3b, r24	; 59
 5a2:	08 95       	ret
 5a4:	8b b7       	in	r24, 0x3b	; 59
 5a6:	80 62       	ori	r24, 0x20	; 32
 5a8:	8b bf       	out	0x3b, r24	; 59
 5aa:	08 95       	ret

000005ac <EXI_TriggerEdge>:
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	49 f1       	breq	.+82     	; 0x602 <EXI_TriggerEdge+0x56>
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <EXI_TriggerEdge+0xe>
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <EXI_TriggerEdge+0xc>
 5b6:	49 c0       	rjmp	.+146    	; 0x64a <EXI_TriggerEdge+0x9e>
 5b8:	08 95       	ret
 5ba:	61 30       	cpi	r22, 0x01	; 1
 5bc:	69 f0       	breq	.+26     	; 0x5d8 <EXI_TriggerEdge+0x2c>
 5be:	28 f0       	brcs	.+10     	; 0x5ca <EXI_TriggerEdge+0x1e>
 5c0:	62 30       	cpi	r22, 0x02	; 2
 5c2:	89 f0       	breq	.+34     	; 0x5e6 <EXI_TriggerEdge+0x3a>
 5c4:	63 30       	cpi	r22, 0x03	; 3
 5c6:	b1 f0       	breq	.+44     	; 0x5f4 <EXI_TriggerEdge+0x48>
 5c8:	08 95       	ret
 5ca:	85 b7       	in	r24, 0x35	; 53
 5cc:	8e 7f       	andi	r24, 0xFE	; 254
 5ce:	85 bf       	out	0x35, r24	; 53
 5d0:	85 b7       	in	r24, 0x35	; 53
 5d2:	8d 7f       	andi	r24, 0xFD	; 253
 5d4:	85 bf       	out	0x35, r24	; 53
 5d6:	08 95       	ret
 5d8:	85 b7       	in	r24, 0x35	; 53
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	85 bf       	out	0x35, r24	; 53
 5de:	85 b7       	in	r24, 0x35	; 53
 5e0:	8d 7f       	andi	r24, 0xFD	; 253
 5e2:	85 bf       	out	0x35, r24	; 53
 5e4:	08 95       	ret
 5e6:	85 b7       	in	r24, 0x35	; 53
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	85 bf       	out	0x35, r24	; 53
 5ec:	85 b7       	in	r24, 0x35	; 53
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	85 bf       	out	0x35, r24	; 53
 5f2:	08 95       	ret
 5f4:	85 b7       	in	r24, 0x35	; 53
 5f6:	81 60       	ori	r24, 0x01	; 1
 5f8:	85 bf       	out	0x35, r24	; 53
 5fa:	85 b7       	in	r24, 0x35	; 53
 5fc:	82 60       	ori	r24, 0x02	; 2
 5fe:	85 bf       	out	0x35, r24	; 53
 600:	08 95       	ret
 602:	61 30       	cpi	r22, 0x01	; 1
 604:	69 f0       	breq	.+26     	; 0x620 <EXI_TriggerEdge+0x74>
 606:	28 f0       	brcs	.+10     	; 0x612 <EXI_TriggerEdge+0x66>
 608:	62 30       	cpi	r22, 0x02	; 2
 60a:	89 f0       	breq	.+34     	; 0x62e <EXI_TriggerEdge+0x82>
 60c:	63 30       	cpi	r22, 0x03	; 3
 60e:	b1 f0       	breq	.+44     	; 0x63c <EXI_TriggerEdge+0x90>
 610:	08 95       	ret
 612:	85 b7       	in	r24, 0x35	; 53
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	85 bf       	out	0x35, r24	; 53
 618:	85 b7       	in	r24, 0x35	; 53
 61a:	87 7f       	andi	r24, 0xF7	; 247
 61c:	85 bf       	out	0x35, r24	; 53
 61e:	08 95       	ret
 620:	85 b7       	in	r24, 0x35	; 53
 622:	84 60       	ori	r24, 0x04	; 4
 624:	85 bf       	out	0x35, r24	; 53
 626:	85 b7       	in	r24, 0x35	; 53
 628:	87 7f       	andi	r24, 0xF7	; 247
 62a:	85 bf       	out	0x35, r24	; 53
 62c:	08 95       	ret
 62e:	85 b7       	in	r24, 0x35	; 53
 630:	8b 7f       	andi	r24, 0xFB	; 251
 632:	85 bf       	out	0x35, r24	; 53
 634:	85 b7       	in	r24, 0x35	; 53
 636:	88 60       	ori	r24, 0x08	; 8
 638:	85 bf       	out	0x35, r24	; 53
 63a:	08 95       	ret
 63c:	85 b7       	in	r24, 0x35	; 53
 63e:	84 60       	ori	r24, 0x04	; 4
 640:	85 bf       	out	0x35, r24	; 53
 642:	85 b7       	in	r24, 0x35	; 53
 644:	88 60       	ori	r24, 0x08	; 8
 646:	85 bf       	out	0x35, r24	; 53
 648:	08 95       	ret
 64a:	62 30       	cpi	r22, 0x02	; 2
 64c:	19 f0       	breq	.+6      	; 0x654 <EXI_TriggerEdge+0xa8>
 64e:	63 30       	cpi	r22, 0x03	; 3
 650:	29 f0       	breq	.+10     	; 0x65c <EXI_TriggerEdge+0xb0>
 652:	08 c0       	rjmp	.+16     	; 0x664 <EXI_TriggerEdge+0xb8>
 654:	84 b7       	in	r24, 0x34	; 52
 656:	8f 7b       	andi	r24, 0xBF	; 191
 658:	84 bf       	out	0x34, r24	; 52
 65a:	08 95       	ret
 65c:	84 b7       	in	r24, 0x34	; 52
 65e:	80 64       	ori	r24, 0x40	; 64
 660:	84 bf       	out	0x34, r24	; 52
 662:	08 95       	ret
 664:	84 b7       	in	r24, 0x34	; 52
 666:	8f 7b       	andi	r24, 0xBF	; 191
 668:	84 bf       	out	0x34, r24	; 52
 66a:	08 95       	ret

0000066c <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	49 f0       	breq	.+18     	; 0x682 <EXI_SetCallBack+0x16>
 670:	18 f0       	brcs	.+6      	; 0x678 <EXI_SetCallBack+0xc>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	59 f0       	breq	.+22     	; 0x68c <EXI_SetCallBack+0x20>
 676:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 678:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <INT0_Fptr+0x1>
 67c:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <INT0_Fptr>
		break;
 680:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 682:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <INT1_Fptr+0x1>
 686:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <INT1_Fptr>
		break;
 68a:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 68c:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <INT2_Fptr+0x1>
 690:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <INT2_Fptr>
 694:	08 95       	ret

00000696 <__vector_1>:




ISR(INT0_vect)
{  
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	2f 93       	push	r18
 6a2:	3f 93       	push	r19
 6a4:	4f 93       	push	r20
 6a6:	5f 93       	push	r21
 6a8:	6f 93       	push	r22
 6aa:	7f 93       	push	r23
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	af 93       	push	r26
 6b2:	bf 93       	push	r27
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 6b8:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <INT0_Fptr>
 6bc:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <INT0_Fptr+0x1>
 6c0:	30 97       	sbiw	r30, 0x00	; 0
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <__vector_1+0x30>
	{
		INT0_Fptr();
 6c4:	09 95       	icall
	}
}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <__vector_2>:
ISR(INT1_vect)
{
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	2f 93       	push	r18
 6f4:	3f 93       	push	r19
 6f6:	4f 93       	push	r20
 6f8:	5f 93       	push	r21
 6fa:	6f 93       	push	r22
 6fc:	7f 93       	push	r23
 6fe:	8f 93       	push	r24
 700:	9f 93       	push	r25
 702:	af 93       	push	r26
 704:	bf 93       	push	r27
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 70a:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <INT1_Fptr>
 70e:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <INT1_Fptr+0x1>
 712:	30 97       	sbiw	r30, 0x00	; 0
 714:	09 f0       	breq	.+2      	; 0x718 <__vector_2+0x30>
	{
		INT1_Fptr();
 716:	09 95       	icall
	}
}
 718:	ff 91       	pop	r31
 71a:	ef 91       	pop	r30
 71c:	bf 91       	pop	r27
 71e:	af 91       	pop	r26
 720:	9f 91       	pop	r25
 722:	8f 91       	pop	r24
 724:	7f 91       	pop	r23
 726:	6f 91       	pop	r22
 728:	5f 91       	pop	r21
 72a:	4f 91       	pop	r20
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <__vector_3>:
ISR(INT2_vect)
{
 73a:	1f 92       	push	r1
 73c:	0f 92       	push	r0
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	2f 93       	push	r18
 746:	3f 93       	push	r19
 748:	4f 93       	push	r20
 74a:	5f 93       	push	r21
 74c:	6f 93       	push	r22
 74e:	7f 93       	push	r23
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 75c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <INT2_Fptr>
 760:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <INT2_Fptr+0x1>
 764:	30 97       	sbiw	r30, 0x00	; 0
 766:	09 f0       	breq	.+2      	; 0x76a <__vector_3+0x30>
	{
		INT2_Fptr();
 768:	09 95       	icall
	}
}
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <TIMER0_Init>:
{
	SET_BIT(TIMSK,OCIE0);
}
void TIMER0_OC_InterruptDisable(void)
{
	CLR_BIT(TIMSK,OCIE0);
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	69 f0       	breq	.+26     	; 0x7aa <TIMER0_Init+0x1e>
 790:	28 f0       	brcs	.+10     	; 0x79c <TIMER0_Init+0x10>
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	89 f0       	breq	.+34     	; 0x7b8 <TIMER0_Init+0x2c>
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	b1 f0       	breq	.+44     	; 0x7c6 <TIMER0_Init+0x3a>
 79a:	1c c0       	rjmp	.+56     	; 0x7d4 <TIMER0_Init+0x48>
 79c:	83 b7       	in	r24, 0x33	; 51
 79e:	8f 7b       	andi	r24, 0xBF	; 191
 7a0:	83 bf       	out	0x33, r24	; 51
 7a2:	83 b7       	in	r24, 0x33	; 51
 7a4:	87 7f       	andi	r24, 0xF7	; 247
 7a6:	83 bf       	out	0x33, r24	; 51
 7a8:	17 c0       	rjmp	.+46     	; 0x7d8 <TIMER0_Init+0x4c>
 7aa:	83 b7       	in	r24, 0x33	; 51
 7ac:	80 64       	ori	r24, 0x40	; 64
 7ae:	83 bf       	out	0x33, r24	; 51
 7b0:	83 b7       	in	r24, 0x33	; 51
 7b2:	87 7f       	andi	r24, 0xF7	; 247
 7b4:	83 bf       	out	0x33, r24	; 51
 7b6:	10 c0       	rjmp	.+32     	; 0x7d8 <TIMER0_Init+0x4c>
 7b8:	83 b7       	in	r24, 0x33	; 51
 7ba:	8f 7b       	andi	r24, 0xBF	; 191
 7bc:	83 bf       	out	0x33, r24	; 51
 7be:	83 b7       	in	r24, 0x33	; 51
 7c0:	88 60       	ori	r24, 0x08	; 8
 7c2:	83 bf       	out	0x33, r24	; 51
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <TIMER0_Init+0x4c>
 7c6:	83 b7       	in	r24, 0x33	; 51
 7c8:	80 64       	ori	r24, 0x40	; 64
 7ca:	83 bf       	out	0x33, r24	; 51
 7cc:	83 b7       	in	r24, 0x33	; 51
 7ce:	88 60       	ori	r24, 0x08	; 8
 7d0:	83 bf       	out	0x33, r24	; 51
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <TIMER0_Init+0x4c>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	08 95       	ret
 7d8:	08 95       	ret

000007da <timer_start>:
 7da:	88 30       	cpi	r24, 0x08	; 8
 7dc:	40 f4       	brcc	.+16     	; 0x7ee <timer_start+0x14>
 7de:	93 b7       	in	r25, 0x33	; 51
 7e0:	98 7f       	andi	r25, 0xF8	; 248
 7e2:	93 bf       	out	0x33, r25	; 51
 7e4:	93 b7       	in	r25, 0x33	; 51
 7e6:	89 2b       	or	r24, r25
 7e8:	83 bf       	out	0x33, r24	; 51
 7ea:	84 e0       	ldi	r24, 0x04	; 4
 7ec:	08 95       	ret
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	08 95       	ret

000007f2 <timer0_stop>:
 7f2:	83 b7       	in	r24, 0x33	; 51
 7f4:	13 be       	out	0x33, r1	; 51
 7f6:	08 95       	ret

000007f8 <TIMER0_OV_SetCallBack>:
 7f8:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Timer0_OVF_Fptr+0x1>
 7fc:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Timer0_OVF_Fptr>
 800:	08 95       	ret

00000802 <__vector_11>:
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	2f 93       	push	r18
 80e:	3f 93       	push	r19
 810:	4f 93       	push	r20
 812:	5f 93       	push	r21
 814:	6f 93       	push	r22
 816:	7f 93       	push	r23
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	af 93       	push	r26
 81e:	bf 93       	push	r27
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
 824:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <counter.1888>
 828:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <counter.1888+0x1>
 82c:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <counter.1888+0x2>
 830:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <counter.1888+0x3>
 834:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <g_overflowsCount>
 838:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <g_overflowsCount+0x1>
 83c:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <g_overflowsCount+0x2>
 840:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <g_overflowsCount+0x3>
 844:	84 17       	cp	r24, r20
 846:	95 07       	cpc	r25, r21
 848:	a6 07       	cpc	r26, r22
 84a:	b7 07       	cpc	r27, r23
 84c:	81 f4       	brne	.+32     	; 0x86e <__stack+0xf>
 84e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <counter.1888>
 852:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter.1888+0x1>
 856:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter.1888+0x2>
 85a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <counter.1888+0x3>
 85e:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0_OVF_Fptr>
 862:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0_OVF_Fptr+0x1>
 866:	30 97       	sbiw	r30, 0x00	; 0
 868:	69 f0       	breq	.+26     	; 0x884 <__stack+0x25>
 86a:	09 95       	icall
 86c:	0b c0       	rjmp	.+22     	; 0x884 <__stack+0x25>
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	a1 1d       	adc	r26, r1
 872:	b1 1d       	adc	r27, r1
 874:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <counter.1888>
 878:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <counter.1888+0x1>
 87c:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <counter.1888+0x2>
 880:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <counter.1888+0x3>
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <TIMER0_OV_InterruptEnable>:
 8a6:	89 b7       	in	r24, 0x39	; 57
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	89 bf       	out	0x39, r24	; 57
 8ac:	08 95       	ret

000008ae <timer_delay>:




EN_timerError_t timer_delay(u16 Delay)
{
 8ae:	8f 92       	push	r8
 8b0:	9f 92       	push	r9
 8b2:	af 92       	push	r10
 8b4:	bf 92       	push	r11
 8b6:	cf 92       	push	r12
 8b8:	df 92       	push	r13
 8ba:	ef 92       	push	r14
 8bc:	ff 92       	push	r15
	double CPU_F = F_CPU;
	double oneTickTime = (8 / CPU_F ) * 1000; // in ms
	double maxDelay = oneTickTime * 256; // in ms
	u32 overflowsCount =(u32)((Delay / maxDelay));
 8be:	bc 01       	movw	r22, r24
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__floatunsisf>
 8c8:	4b 01       	movw	r8, r22
 8ca:	5c 01       	movw	r10, r24
 8cc:	2f e6       	ldi	r18, 0x6F	; 111
 8ce:	32 e1       	ldi	r19, 0x12	; 18
 8d0:	43 e8       	ldi	r20, 0x83	; 131
 8d2:	5e e3       	ldi	r21, 0x3E	; 62
 8d4:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divsf3>
 8d8:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fixunssfsi>
 8dc:	6b 01       	movw	r12, r22
 8de:	7c 01       	movw	r14, r24
	u8 timerInitValue;
	if (overflowsCount > 1)
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	c8 16       	cp	r12, r24
 8e4:	d1 04       	cpc	r13, r1
 8e6:	e1 04       	cpc	r14, r1
 8e8:	f1 04       	cpc	r15, r1
 8ea:	28 f1       	brcs	.+74     	; 0x936 <timer_delay+0x88>
	{
		timerInitValue = (u8)(256 - ((Delay - (maxDelay * (overflowsCount - 1))) / oneTickTime));
 8ec:	c7 01       	movw	r24, r14
 8ee:	b6 01       	movw	r22, r12
 8f0:	61 50       	subi	r22, 0x01	; 1
 8f2:	71 09       	sbc	r23, r1
 8f4:	81 09       	sbc	r24, r1
 8f6:	91 09       	sbc	r25, r1
 8f8:	0e 94 cb 05 	call	0xb96	; 0xb96 <__floatunsisf>
 8fc:	2f e6       	ldi	r18, 0x6F	; 111
 8fe:	32 e1       	ldi	r19, 0x12	; 18
 900:	43 e8       	ldi	r20, 0x83	; 131
 902:	5e e3       	ldi	r21, 0x3E	; 62
 904:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__mulsf3>
 908:	9b 01       	movw	r18, r22
 90a:	ac 01       	movw	r20, r24
 90c:	c5 01       	movw	r24, r10
 90e:	b4 01       	movw	r22, r8
 910:	0e 94 bd 04 	call	0x97a	; 0x97a <__subsf3>
 914:	2f e6       	ldi	r18, 0x6F	; 111
 916:	32 e1       	ldi	r19, 0x12	; 18
 918:	43 e8       	ldi	r20, 0x83	; 131
 91a:	5a e3       	ldi	r21, 0x3A	; 58
 91c:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divsf3>
 920:	9b 01       	movw	r18, r22
 922:	ac 01       	movw	r20, r24
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	80 e8       	ldi	r24, 0x80	; 128
 92a:	93 e4       	ldi	r25, 0x43	; 67
 92c:	0e 94 bd 04 	call	0x97a	; 0x97a <__subsf3>
 930:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fixunssfsi>
 934:	10 c0       	rjmp	.+32     	; 0x956 <timer_delay+0xa8>
	}
	else
	{
		timerInitValue = (u8)((maxDelay - Delay)/oneTickTime);
 936:	a5 01       	movw	r20, r10
 938:	94 01       	movw	r18, r8
 93a:	6f e6       	ldi	r22, 0x6F	; 111
 93c:	72 e1       	ldi	r23, 0x12	; 18
 93e:	83 e8       	ldi	r24, 0x83	; 131
 940:	9e e3       	ldi	r25, 0x3E	; 62
 942:	0e 94 bd 04 	call	0x97a	; 0x97a <__subsf3>
 946:	2f e6       	ldi	r18, 0x6F	; 111
 948:	32 e1       	ldi	r19, 0x12	; 18
 94a:	43 e8       	ldi	r20, 0x83	; 131
 94c:	5a e3       	ldi	r21, 0x3A	; 58
 94e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divsf3>
 952:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fixunssfsi>
	}
	TCNT0 = timerInitValue;
 956:	62 bf       	out	0x32, r22	; 50
	
   g_overflowsCount=overflowsCount;
 958:	c0 92 73 00 	sts	0x0073, r12	; 0x800073 <g_overflowsCount>
 95c:	d0 92 74 00 	sts	0x0074, r13	; 0x800074 <g_overflowsCount+0x1>
 960:	e0 92 75 00 	sts	0x0075, r14	; 0x800075 <g_overflowsCount+0x2>
 964:	f0 92 76 00 	sts	0x0076, r15	; 0x800076 <g_overflowsCount+0x3>
// 		SET_BIT(TIFR, 0);
// 	}
// 
// 	timer0_stop();

}
 968:	ff 90       	pop	r15
 96a:	ef 90       	pop	r14
 96c:	df 90       	pop	r13
 96e:	cf 90       	pop	r12
 970:	bf 90       	pop	r11
 972:	af 90       	pop	r10
 974:	9f 90       	pop	r9
 976:	8f 90       	pop	r8
 978:	08 95       	ret

0000097a <__subsf3>:
 97a:	50 58       	subi	r21, 0x80	; 128

0000097c <__addsf3>:
 97c:	bb 27       	eor	r27, r27
 97e:	aa 27       	eor	r26, r26
 980:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__addsf3x>
 984:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_round>
 988:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscA>
 98c:	38 f0       	brcs	.+14     	; 0x99c <__addsf3+0x20>
 98e:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscB>
 992:	20 f0       	brcs	.+8      	; 0x99c <__addsf3+0x20>
 994:	39 f4       	brne	.+14     	; 0x9a4 <__addsf3+0x28>
 996:	9f 3f       	cpi	r25, 0xFF	; 255
 998:	19 f4       	brne	.+6      	; 0x9a0 <__addsf3+0x24>
 99a:	26 f4       	brtc	.+8      	; 0x9a4 <__addsf3+0x28>
 99c:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_nan>
 9a0:	0e f4       	brtc	.+2      	; 0x9a4 <__addsf3+0x28>
 9a2:	e0 95       	com	r30
 9a4:	e7 fb       	bst	r30, 7
 9a6:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_inf>

000009aa <__addsf3x>:
 9aa:	e9 2f       	mov	r30, r25
 9ac:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_split3>
 9b0:	58 f3       	brcs	.-42     	; 0x988 <__addsf3+0xc>
 9b2:	ba 17       	cp	r27, r26
 9b4:	62 07       	cpc	r22, r18
 9b6:	73 07       	cpc	r23, r19
 9b8:	84 07       	cpc	r24, r20
 9ba:	95 07       	cpc	r25, r21
 9bc:	20 f0       	brcs	.+8      	; 0x9c6 <__addsf3x+0x1c>
 9be:	79 f4       	brne	.+30     	; 0x9de <__addsf3x+0x34>
 9c0:	a6 f5       	brtc	.+104    	; 0xa2a <__addsf3x+0x80>
 9c2:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_zero>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3x+0x20>
 9c8:	e0 95       	com	r30
 9ca:	0b 2e       	mov	r0, r27
 9cc:	ba 2f       	mov	r27, r26
 9ce:	a0 2d       	mov	r26, r0
 9d0:	0b 01       	movw	r0, r22
 9d2:	b9 01       	movw	r22, r18
 9d4:	90 01       	movw	r18, r0
 9d6:	0c 01       	movw	r0, r24
 9d8:	ca 01       	movw	r24, r20
 9da:	a0 01       	movw	r20, r0
 9dc:	11 24       	eor	r1, r1
 9de:	ff 27       	eor	r31, r31
 9e0:	59 1b       	sub	r21, r25
 9e2:	99 f0       	breq	.+38     	; 0xa0a <__addsf3x+0x60>
 9e4:	59 3f       	cpi	r21, 0xF9	; 249
 9e6:	50 f4       	brcc	.+20     	; 0x9fc <__addsf3x+0x52>
 9e8:	50 3e       	cpi	r21, 0xE0	; 224
 9ea:	68 f1       	brcs	.+90     	; 0xa46 <__addsf3x+0x9c>
 9ec:	1a 16       	cp	r1, r26
 9ee:	f0 40       	sbci	r31, 0x00	; 0
 9f0:	a2 2f       	mov	r26, r18
 9f2:	23 2f       	mov	r18, r19
 9f4:	34 2f       	mov	r19, r20
 9f6:	44 27       	eor	r20, r20
 9f8:	58 5f       	subi	r21, 0xF8	; 248
 9fa:	f3 cf       	rjmp	.-26     	; 0x9e2 <__addsf3x+0x38>
 9fc:	46 95       	lsr	r20
 9fe:	37 95       	ror	r19
 a00:	27 95       	ror	r18
 a02:	a7 95       	ror	r26
 a04:	f0 40       	sbci	r31, 0x00	; 0
 a06:	53 95       	inc	r21
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__addsf3x+0x52>
 a0a:	7e f4       	brtc	.+30     	; 0xa2a <__addsf3x+0x80>
 a0c:	1f 16       	cp	r1, r31
 a0e:	ba 0b       	sbc	r27, r26
 a10:	62 0b       	sbc	r22, r18
 a12:	73 0b       	sbc	r23, r19
 a14:	84 0b       	sbc	r24, r20
 a16:	ba f0       	brmi	.+46     	; 0xa46 <__addsf3x+0x9c>
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	a1 f0       	breq	.+40     	; 0xa44 <__addsf3x+0x9a>
 a1c:	ff 0f       	add	r31, r31
 a1e:	bb 1f       	adc	r27, r27
 a20:	66 1f       	adc	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	c2 f7       	brpl	.-16     	; 0xa18 <__addsf3x+0x6e>
 a28:	0e c0       	rjmp	.+28     	; 0xa46 <__addsf3x+0x9c>
 a2a:	ba 0f       	add	r27, r26
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 1f       	adc	r23, r19
 a30:	84 1f       	adc	r24, r20
 a32:	48 f4       	brcc	.+18     	; 0xa46 <__addsf3x+0x9c>
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	9e 3f       	cpi	r25, 0xFE	; 254
 a40:	08 f0       	brcs	.+2      	; 0xa44 <__addsf3x+0x9a>
 a42:	b0 cf       	rjmp	.-160    	; 0x9a4 <__addsf3+0x28>
 a44:	93 95       	inc	r25
 a46:	88 0f       	add	r24, r24
 a48:	08 f0       	brcs	.+2      	; 0xa4c <__addsf3x+0xa2>
 a4a:	99 27       	eor	r25, r25
 a4c:	ee 0f       	add	r30, r30
 a4e:	97 95       	ror	r25
 a50:	87 95       	ror	r24
 a52:	08 95       	ret

00000a54 <__divsf3>:
 a54:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__divsf3x>
 a58:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_round>
 a5c:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscB>
 a60:	58 f0       	brcs	.+22     	; 0xa78 <__divsf3+0x24>
 a62:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscA>
 a66:	40 f0       	brcs	.+16     	; 0xa78 <__divsf3+0x24>
 a68:	29 f4       	brne	.+10     	; 0xa74 <__divsf3+0x20>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	29 f0       	breq	.+10     	; 0xa78 <__divsf3+0x24>
 a6e:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_inf>
 a72:	51 11       	cpse	r21, r1
 a74:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>
 a78:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_nan>

00000a7c <__divsf3x>:
 a7c:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_split3>
 a80:	68 f3       	brcs	.-38     	; 0xa5c <__divsf3+0x8>

00000a82 <__divsf3_pse>:
 a82:	99 23       	and	r25, r25
 a84:	b1 f3       	breq	.-20     	; 0xa72 <__divsf3+0x1e>
 a86:	55 23       	and	r21, r21
 a88:	91 f3       	breq	.-28     	; 0xa6e <__divsf3+0x1a>
 a8a:	95 1b       	sub	r25, r21
 a8c:	55 0b       	sbc	r21, r21
 a8e:	bb 27       	eor	r27, r27
 a90:	aa 27       	eor	r26, r26
 a92:	62 17       	cp	r22, r18
 a94:	73 07       	cpc	r23, r19
 a96:	84 07       	cpc	r24, r20
 a98:	38 f0       	brcs	.+14     	; 0xaa8 <__divsf3_pse+0x26>
 a9a:	9f 5f       	subi	r25, 0xFF	; 255
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	22 0f       	add	r18, r18
 aa0:	33 1f       	adc	r19, r19
 aa2:	44 1f       	adc	r20, r20
 aa4:	aa 1f       	adc	r26, r26
 aa6:	a9 f3       	breq	.-22     	; 0xa92 <__divsf3_pse+0x10>
 aa8:	35 d0       	rcall	.+106    	; 0xb14 <__divsf3_pse+0x92>
 aaa:	0e 2e       	mov	r0, r30
 aac:	3a f0       	brmi	.+14     	; 0xabc <__divsf3_pse+0x3a>
 aae:	e0 e8       	ldi	r30, 0x80	; 128
 ab0:	32 d0       	rcall	.+100    	; 0xb16 <__divsf3_pse+0x94>
 ab2:	91 50       	subi	r25, 0x01	; 1
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	e6 95       	lsr	r30
 ab8:	00 1c       	adc	r0, r0
 aba:	ca f7       	brpl	.-14     	; 0xaae <__divsf3_pse+0x2c>
 abc:	2b d0       	rcall	.+86     	; 0xb14 <__divsf3_pse+0x92>
 abe:	fe 2f       	mov	r31, r30
 ac0:	29 d0       	rcall	.+82     	; 0xb14 <__divsf3_pse+0x92>
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	bb 1f       	adc	r27, r27
 aca:	26 17       	cp	r18, r22
 acc:	37 07       	cpc	r19, r23
 ace:	48 07       	cpc	r20, r24
 ad0:	ab 07       	cpc	r26, r27
 ad2:	b0 e8       	ldi	r27, 0x80	; 128
 ad4:	09 f0       	breq	.+2      	; 0xad8 <__divsf3_pse+0x56>
 ad6:	bb 0b       	sbc	r27, r27
 ad8:	80 2d       	mov	r24, r0
 ada:	bf 01       	movw	r22, r30
 adc:	ff 27       	eor	r31, r31
 ade:	93 58       	subi	r25, 0x83	; 131
 ae0:	5f 4f       	sbci	r21, 0xFF	; 255
 ae2:	3a f0       	brmi	.+14     	; 0xaf2 <__divsf3_pse+0x70>
 ae4:	9e 3f       	cpi	r25, 0xFE	; 254
 ae6:	51 05       	cpc	r21, r1
 ae8:	78 f0       	brcs	.+30     	; 0xb08 <__divsf3_pse+0x86>
 aea:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_inf>
 aee:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>
 af2:	5f 3f       	cpi	r21, 0xFF	; 255
 af4:	e4 f3       	brlt	.-8      	; 0xaee <__divsf3_pse+0x6c>
 af6:	98 3e       	cpi	r25, 0xE8	; 232
 af8:	d4 f3       	brlt	.-12     	; 0xaee <__divsf3_pse+0x6c>
 afa:	86 95       	lsr	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	b7 95       	ror	r27
 b02:	f7 95       	ror	r31
 b04:	9f 5f       	subi	r25, 0xFF	; 255
 b06:	c9 f7       	brne	.-14     	; 0xafa <__divsf3_pse+0x78>
 b08:	88 0f       	add	r24, r24
 b0a:	91 1d       	adc	r25, r1
 b0c:	96 95       	lsr	r25
 b0e:	87 95       	ror	r24
 b10:	97 f9       	bld	r25, 7
 b12:	08 95       	ret
 b14:	e1 e0       	ldi	r30, 0x01	; 1
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	bb 1f       	adc	r27, r27
 b1e:	62 17       	cp	r22, r18
 b20:	73 07       	cpc	r23, r19
 b22:	84 07       	cpc	r24, r20
 b24:	ba 07       	cpc	r27, r26
 b26:	20 f0       	brcs	.+8      	; 0xb30 <__divsf3_pse+0xae>
 b28:	62 1b       	sub	r22, r18
 b2a:	73 0b       	sbc	r23, r19
 b2c:	84 0b       	sbc	r24, r20
 b2e:	ba 0b       	sbc	r27, r26
 b30:	ee 1f       	adc	r30, r30
 b32:	88 f7       	brcc	.-30     	; 0xb16 <__divsf3_pse+0x94>
 b34:	e0 95       	com	r30
 b36:	08 95       	ret

00000b38 <__fixunssfsi>:
 b38:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_splitA>
 b3c:	88 f0       	brcs	.+34     	; 0xb60 <__fixunssfsi+0x28>
 b3e:	9f 57       	subi	r25, 0x7F	; 127
 b40:	98 f0       	brcs	.+38     	; 0xb68 <__fixunssfsi+0x30>
 b42:	b9 2f       	mov	r27, r25
 b44:	99 27       	eor	r25, r25
 b46:	b7 51       	subi	r27, 0x17	; 23
 b48:	b0 f0       	brcs	.+44     	; 0xb76 <__fixunssfsi+0x3e>
 b4a:	e1 f0       	breq	.+56     	; 0xb84 <__fixunssfsi+0x4c>
 b4c:	66 0f       	add	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	1a f0       	brmi	.+6      	; 0xb5c <__fixunssfsi+0x24>
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__fixunssfsi+0x14>
 b5a:	14 c0       	rjmp	.+40     	; 0xb84 <__fixunssfsi+0x4c>
 b5c:	b1 30       	cpi	r27, 0x01	; 1
 b5e:	91 f0       	breq	.+36     	; 0xb84 <__fixunssfsi+0x4c>
 b60:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_zero>
 b64:	b1 e0       	ldi	r27, 0x01	; 1
 b66:	08 95       	ret
 b68:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_zero>
 b6c:	67 2f       	mov	r22, r23
 b6e:	78 2f       	mov	r23, r24
 b70:	88 27       	eor	r24, r24
 b72:	b8 5f       	subi	r27, 0xF8	; 248
 b74:	39 f0       	breq	.+14     	; 0xb84 <__fixunssfsi+0x4c>
 b76:	b9 3f       	cpi	r27, 0xF9	; 249
 b78:	cc f3       	brlt	.-14     	; 0xb6c <__fixunssfsi+0x34>
 b7a:	86 95       	lsr	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b3 95       	inc	r27
 b82:	d9 f7       	brne	.-10     	; 0xb7a <__fixunssfsi+0x42>
 b84:	3e f4       	brtc	.+14     	; 0xb94 <__fixunssfsi+0x5c>
 b86:	90 95       	com	r25
 b88:	80 95       	com	r24
 b8a:	70 95       	com	r23
 b8c:	61 95       	neg	r22
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	08 95       	ret

00000b96 <__floatunsisf>:
 b96:	e8 94       	clt
 b98:	09 c0       	rjmp	.+18     	; 0xbac <__floatsisf+0x12>

00000b9a <__floatsisf>:
 b9a:	97 fb       	bst	r25, 7
 b9c:	3e f4       	brtc	.+14     	; 0xbac <__floatsisf+0x12>
 b9e:	90 95       	com	r25
 ba0:	80 95       	com	r24
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	99 23       	and	r25, r25
 bae:	a9 f0       	breq	.+42     	; 0xbda <__floatsisf+0x40>
 bb0:	f9 2f       	mov	r31, r25
 bb2:	96 e9       	ldi	r25, 0x96	; 150
 bb4:	bb 27       	eor	r27, r27
 bb6:	93 95       	inc	r25
 bb8:	f6 95       	lsr	r31
 bba:	87 95       	ror	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b7 95       	ror	r27
 bc2:	f1 11       	cpse	r31, r1
 bc4:	f8 cf       	rjmp	.-16     	; 0xbb6 <__floatsisf+0x1c>
 bc6:	fa f4       	brpl	.+62     	; 0xc06 <__floatsisf+0x6c>
 bc8:	bb 0f       	add	r27, r27
 bca:	11 f4       	brne	.+4      	; 0xbd0 <__floatsisf+0x36>
 bcc:	60 ff       	sbrs	r22, 0
 bce:	1b c0       	rjmp	.+54     	; 0xc06 <__floatsisf+0x6c>
 bd0:	6f 5f       	subi	r22, 0xFF	; 255
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	16 c0       	rjmp	.+44     	; 0xc06 <__floatsisf+0x6c>
 bda:	88 23       	and	r24, r24
 bdc:	11 f0       	breq	.+4      	; 0xbe2 <__floatsisf+0x48>
 bde:	96 e9       	ldi	r25, 0x96	; 150
 be0:	11 c0       	rjmp	.+34     	; 0xc04 <__floatsisf+0x6a>
 be2:	77 23       	and	r23, r23
 be4:	21 f0       	breq	.+8      	; 0xbee <__floatsisf+0x54>
 be6:	9e e8       	ldi	r25, 0x8E	; 142
 be8:	87 2f       	mov	r24, r23
 bea:	76 2f       	mov	r23, r22
 bec:	05 c0       	rjmp	.+10     	; 0xbf8 <__floatsisf+0x5e>
 bee:	66 23       	and	r22, r22
 bf0:	71 f0       	breq	.+28     	; 0xc0e <__floatsisf+0x74>
 bf2:	96 e8       	ldi	r25, 0x86	; 134
 bf4:	86 2f       	mov	r24, r22
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	2a f0       	brmi	.+10     	; 0xc06 <__floatsisf+0x6c>
 bfc:	9a 95       	dec	r25
 bfe:	66 0f       	add	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	da f7       	brpl	.-10     	; 0xbfc <__floatsisf+0x62>
 c06:	88 0f       	add	r24, r24
 c08:	96 95       	lsr	r25
 c0a:	87 95       	ror	r24
 c0c:	97 f9       	bld	r25, 7
 c0e:	08 95       	ret

00000c10 <__fp_inf>:
 c10:	97 f9       	bld	r25, 7
 c12:	9f 67       	ori	r25, 0x7F	; 127
 c14:	80 e8       	ldi	r24, 0x80	; 128
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	08 95       	ret

00000c1c <__fp_nan>:
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	80 ec       	ldi	r24, 0xC0	; 192
 c20:	08 95       	ret

00000c22 <__fp_pscA>:
 c22:	00 24       	eor	r0, r0
 c24:	0a 94       	dec	r0
 c26:	16 16       	cp	r1, r22
 c28:	17 06       	cpc	r1, r23
 c2a:	18 06       	cpc	r1, r24
 c2c:	09 06       	cpc	r0, r25
 c2e:	08 95       	ret

00000c30 <__fp_pscB>:
 c30:	00 24       	eor	r0, r0
 c32:	0a 94       	dec	r0
 c34:	12 16       	cp	r1, r18
 c36:	13 06       	cpc	r1, r19
 c38:	14 06       	cpc	r1, r20
 c3a:	05 06       	cpc	r0, r21
 c3c:	08 95       	ret

00000c3e <__fp_round>:
 c3e:	09 2e       	mov	r0, r25
 c40:	03 94       	inc	r0
 c42:	00 0c       	add	r0, r0
 c44:	11 f4       	brne	.+4      	; 0xc4a <__fp_round+0xc>
 c46:	88 23       	and	r24, r24
 c48:	52 f0       	brmi	.+20     	; 0xc5e <__fp_round+0x20>
 c4a:	bb 0f       	add	r27, r27
 c4c:	40 f4       	brcc	.+16     	; 0xc5e <__fp_round+0x20>
 c4e:	bf 2b       	or	r27, r31
 c50:	11 f4       	brne	.+4      	; 0xc56 <__fp_round+0x18>
 c52:	60 ff       	sbrs	r22, 0
 c54:	04 c0       	rjmp	.+8      	; 0xc5e <__fp_round+0x20>
 c56:	6f 5f       	subi	r22, 0xFF	; 255
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	08 95       	ret

00000c60 <__fp_split3>:
 c60:	57 fd       	sbrc	r21, 7
 c62:	90 58       	subi	r25, 0x80	; 128
 c64:	44 0f       	add	r20, r20
 c66:	55 1f       	adc	r21, r21
 c68:	59 f0       	breq	.+22     	; 0xc80 <__fp_splitA+0x10>
 c6a:	5f 3f       	cpi	r21, 0xFF	; 255
 c6c:	71 f0       	breq	.+28     	; 0xc8a <__fp_splitA+0x1a>
 c6e:	47 95       	ror	r20

00000c70 <__fp_splitA>:
 c70:	88 0f       	add	r24, r24
 c72:	97 fb       	bst	r25, 7
 c74:	99 1f       	adc	r25, r25
 c76:	61 f0       	breq	.+24     	; 0xc90 <__fp_splitA+0x20>
 c78:	9f 3f       	cpi	r25, 0xFF	; 255
 c7a:	79 f0       	breq	.+30     	; 0xc9a <__fp_splitA+0x2a>
 c7c:	87 95       	ror	r24
 c7e:	08 95       	ret
 c80:	12 16       	cp	r1, r18
 c82:	13 06       	cpc	r1, r19
 c84:	14 06       	cpc	r1, r20
 c86:	55 1f       	adc	r21, r21
 c88:	f2 cf       	rjmp	.-28     	; 0xc6e <__fp_split3+0xe>
 c8a:	46 95       	lsr	r20
 c8c:	f1 df       	rcall	.-30     	; 0xc70 <__fp_splitA>
 c8e:	08 c0       	rjmp	.+16     	; 0xca0 <__fp_splitA+0x30>
 c90:	16 16       	cp	r1, r22
 c92:	17 06       	cpc	r1, r23
 c94:	18 06       	cpc	r1, r24
 c96:	99 1f       	adc	r25, r25
 c98:	f1 cf       	rjmp	.-30     	; 0xc7c <__fp_splitA+0xc>
 c9a:	86 95       	lsr	r24
 c9c:	71 05       	cpc	r23, r1
 c9e:	61 05       	cpc	r22, r1
 ca0:	08 94       	sec
 ca2:	08 95       	ret

00000ca4 <__fp_zero>:
 ca4:	e8 94       	clt

00000ca6 <__fp_szero>:
 ca6:	bb 27       	eor	r27, r27
 ca8:	66 27       	eor	r22, r22
 caa:	77 27       	eor	r23, r23
 cac:	cb 01       	movw	r24, r22
 cae:	97 f9       	bld	r25, 7
 cb0:	08 95       	ret

00000cb2 <__mulsf3>:
 cb2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__mulsf3x>
 cb6:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_round>
 cba:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscA>
 cbe:	38 f0       	brcs	.+14     	; 0xcce <__mulsf3+0x1c>
 cc0:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscB>
 cc4:	20 f0       	brcs	.+8      	; 0xcce <__mulsf3+0x1c>
 cc6:	95 23       	and	r25, r21
 cc8:	11 f0       	breq	.+4      	; 0xcce <__mulsf3+0x1c>
 cca:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_inf>
 cce:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_nan>
 cd2:	11 24       	eor	r1, r1
 cd4:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>

00000cd8 <__mulsf3x>:
 cd8:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_split3>
 cdc:	70 f3       	brcs	.-36     	; 0xcba <__mulsf3+0x8>

00000cde <__mulsf3_pse>:
 cde:	95 9f       	mul	r25, r21
 ce0:	c1 f3       	breq	.-16     	; 0xcd2 <__mulsf3+0x20>
 ce2:	95 0f       	add	r25, r21
 ce4:	50 e0       	ldi	r21, 0x00	; 0
 ce6:	55 1f       	adc	r21, r21
 ce8:	62 9f       	mul	r22, r18
 cea:	f0 01       	movw	r30, r0
 cec:	72 9f       	mul	r23, r18
 cee:	bb 27       	eor	r27, r27
 cf0:	f0 0d       	add	r31, r0
 cf2:	b1 1d       	adc	r27, r1
 cf4:	63 9f       	mul	r22, r19
 cf6:	aa 27       	eor	r26, r26
 cf8:	f0 0d       	add	r31, r0
 cfa:	b1 1d       	adc	r27, r1
 cfc:	aa 1f       	adc	r26, r26
 cfe:	64 9f       	mul	r22, r20
 d00:	66 27       	eor	r22, r22
 d02:	b0 0d       	add	r27, r0
 d04:	a1 1d       	adc	r26, r1
 d06:	66 1f       	adc	r22, r22
 d08:	82 9f       	mul	r24, r18
 d0a:	22 27       	eor	r18, r18
 d0c:	b0 0d       	add	r27, r0
 d0e:	a1 1d       	adc	r26, r1
 d10:	62 1f       	adc	r22, r18
 d12:	73 9f       	mul	r23, r19
 d14:	b0 0d       	add	r27, r0
 d16:	a1 1d       	adc	r26, r1
 d18:	62 1f       	adc	r22, r18
 d1a:	83 9f       	mul	r24, r19
 d1c:	a0 0d       	add	r26, r0
 d1e:	61 1d       	adc	r22, r1
 d20:	22 1f       	adc	r18, r18
 d22:	74 9f       	mul	r23, r20
 d24:	33 27       	eor	r19, r19
 d26:	a0 0d       	add	r26, r0
 d28:	61 1d       	adc	r22, r1
 d2a:	23 1f       	adc	r18, r19
 d2c:	84 9f       	mul	r24, r20
 d2e:	60 0d       	add	r22, r0
 d30:	21 1d       	adc	r18, r1
 d32:	82 2f       	mov	r24, r18
 d34:	76 2f       	mov	r23, r22
 d36:	6a 2f       	mov	r22, r26
 d38:	11 24       	eor	r1, r1
 d3a:	9f 57       	subi	r25, 0x7F	; 127
 d3c:	50 40       	sbci	r21, 0x00	; 0
 d3e:	9a f0       	brmi	.+38     	; 0xd66 <__mulsf3_pse+0x88>
 d40:	f1 f0       	breq	.+60     	; 0xd7e <__mulsf3_pse+0xa0>
 d42:	88 23       	and	r24, r24
 d44:	4a f0       	brmi	.+18     	; 0xd58 <__mulsf3_pse+0x7a>
 d46:	ee 0f       	add	r30, r30
 d48:	ff 1f       	adc	r31, r31
 d4a:	bb 1f       	adc	r27, r27
 d4c:	66 1f       	adc	r22, r22
 d4e:	77 1f       	adc	r23, r23
 d50:	88 1f       	adc	r24, r24
 d52:	91 50       	subi	r25, 0x01	; 1
 d54:	50 40       	sbci	r21, 0x00	; 0
 d56:	a9 f7       	brne	.-22     	; 0xd42 <__mulsf3_pse+0x64>
 d58:	9e 3f       	cpi	r25, 0xFE	; 254
 d5a:	51 05       	cpc	r21, r1
 d5c:	80 f0       	brcs	.+32     	; 0xd7e <__mulsf3_pse+0xa0>
 d5e:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_inf>
 d62:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>
 d66:	5f 3f       	cpi	r21, 0xFF	; 255
 d68:	e4 f3       	brlt	.-8      	; 0xd62 <__mulsf3_pse+0x84>
 d6a:	98 3e       	cpi	r25, 0xE8	; 232
 d6c:	d4 f3       	brlt	.-12     	; 0xd62 <__mulsf3_pse+0x84>
 d6e:	86 95       	lsr	r24
 d70:	77 95       	ror	r23
 d72:	67 95       	ror	r22
 d74:	b7 95       	ror	r27
 d76:	f7 95       	ror	r31
 d78:	e7 95       	ror	r30
 d7a:	9f 5f       	subi	r25, 0xFF	; 255
 d7c:	c1 f7       	brne	.-16     	; 0xd6e <__mulsf3_pse+0x90>
 d7e:	fe 2b       	or	r31, r30
 d80:	88 0f       	add	r24, r24
 d82:	91 1d       	adc	r25, r1
 d84:	96 95       	lsr	r25
 d86:	87 95       	ror	r24
 d88:	97 f9       	bld	r25, 7
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
