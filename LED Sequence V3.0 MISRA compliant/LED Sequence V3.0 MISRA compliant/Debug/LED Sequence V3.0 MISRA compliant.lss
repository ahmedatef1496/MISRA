
LED Sequence V3.0 MISRA compliant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800066  00800066  00000d08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001989  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bda  00000000  00000000  000028e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1f  00000000  00000000  000034bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  000043e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3e  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001114  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000063ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_1>
   8:	0c 94 15 03 	jmp	0x62a	; 0x62a <__vector_2>
   c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  8a:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_leds_mode>:
;

void set_leds_mode (void)
{  
	static u16 leds_mode=0;
	if (leds_mode==7)
  92:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  96:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  9a:	87 30       	cpi	r24, 0x07	; 7
  9c:	91 05       	cpc	r25, r1
  9e:	d1 f4       	brne	.+52     	; 0xd4 <set_leds_mode+0x42>
	{  CLR_BIT(blinking_leds_mode,(leds_mode-4));
  a0:	04 97       	sbiw	r24, 0x04	; 4
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	a9 01       	movw	r20, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <set_leds_mode+0x1c>
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <set_leds_mode+0x18>
  b2:	ca 01       	movw	r24, r20
  b4:	80 95       	com	r24
  b6:	90 95       	com	r25
  b8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <blinking_leds_mode>
  bc:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <blinking_leds_mode+0x1>
  c0:	82 23       	and	r24, r18
  c2:	93 23       	and	r25, r19
  c4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <blinking_leds_mode+0x1>
  c8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <blinking_leds_mode>
		leds_mode=0;
  cc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
  d0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
	}

	if ( leds_mode<=3)
  d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  d8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	91 05       	cpc	r25, r1
  e0:	98 f4       	brcc	.+38     	; 0x108 <set_leds_mode+0x76>
	{
		SET_BIT(blinking_leds_mode,leds_mode);
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	08 2e       	mov	r0, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <set_leds_mode+0x5c>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <set_leds_mode+0x58>
  f2:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <blinking_leds_mode>
  f6:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <blinking_leds_mode+0x1>
  fa:	24 2b       	or	r18, r20
  fc:	35 2b       	or	r19, r21
  fe:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <blinking_leds_mode+0x1>
 102:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <blinking_leds_mode>
 106:	19 c0       	rjmp	.+50     	; 0x13a <set_leds_mode+0xa8>
	}
	else if ( leds_mode>3)
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	91 05       	cpc	r25, r1
 10c:	b0 f0       	brcs	.+44     	; 0x13a <set_leds_mode+0xa8>
	{
		CLR_BIT(blinking_leds_mode,(leds_mode-4));
 10e:	ac 01       	movw	r20, r24
 110:	44 50       	subi	r20, 0x04	; 4
 112:	51 09       	sbc	r21, r1
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <set_leds_mode+0x8c>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	4a 95       	dec	r20
 120:	e2 f7       	brpl	.-8      	; 0x11a <set_leds_mode+0x88>
 122:	20 95       	com	r18
 124:	30 95       	com	r19
 126:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <blinking_leds_mode>
 12a:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <blinking_leds_mode+0x1>
 12e:	24 23       	and	r18, r20
 130:	35 23       	and	r19, r21
 132:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <blinking_leds_mode+0x1>
 136:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <blinking_leds_mode>
	}

	leds_mode++;
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 140:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 144:	08 95       	ret

00000146 <set_blinking_t_mode>:
}


void set_blinking_t_mode (void)
{  
	blinking_time_mode++;
 146:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <blinking_time_mode>
 14a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <blinking_time_mode+0x1>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <blinking_time_mode+0x1>
 154:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blinking_time_mode>
	switch (blinking_time_mode)
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	91 05       	cpc	r25, r1
 15c:	19 f1       	breq	.+70     	; 0x1a4 <set_blinking_t_mode+0x5e>
 15e:	30 f4       	brcc	.+12     	; 0x16c <set_blinking_t_mode+0x26>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	49 f0       	breq	.+18     	; 0x178 <set_blinking_t_mode+0x32>
 166:	02 97       	sbiw	r24, 0x02	; 2
 168:	91 f0       	breq	.+36     	; 0x18e <set_blinking_t_mode+0x48>
 16a:	3b c0       	rjmp	.+118    	; 0x1e2 <set_blinking_t_mode+0x9c>
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	91 05       	cpc	r25, r1
 170:	21 f1       	breq	.+72     	; 0x1ba <set_blinking_t_mode+0x74>
 172:	05 97       	sbiw	r24, 0x05	; 5
 174:	59 f1       	breq	.+86     	; 0x1cc <set_blinking_t_mode+0x86>
 176:	35 c0       	rjmp	.+106    	; 0x1e2 <set_blinking_t_mode+0x9c>
	{
		case 1:	blinking_times.ton =  100;      blinking_times.toff=900;   //blinking_time_mode++;
 178:	e0 e6       	ldi	r30, 0x60	; 96
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	84 e6       	ldi	r24, 0x64	; 100
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	80 83       	st	Z, r24
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	93 83       	std	Z+3, r25	; 0x03
 18a:	82 83       	std	Z+2, r24	; 0x02
		break;
 18c:	08 95       	ret
		case 2:	blinking_times.ton  = 200;	 blinking_times.toff=800;  //blinking_time_mode++;
 18e:	e0 e6       	ldi	r30, 0x60	; 96
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	88 ec       	ldi	r24, 0xC8	; 200
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	93 83       	std	Z+3, r25	; 0x03
 1a0:	82 83       	std	Z+2, r24	; 0x02
		break;
 1a2:	08 95       	ret
		case 3:	blinking_times.ton  = 300;	 blinking_times.toff=700;  //blinking_time_mode++;
 1a4:	e0 e6       	ldi	r30, 0x60	; 96
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	8c e2       	ldi	r24, 0x2C	; 44
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
 1b0:	8c eb       	ldi	r24, 0xBC	; 188
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	93 83       	std	Z+3, r25	; 0x03
 1b6:	82 83       	std	Z+2, r24	; 0x02
		break;
 1b8:	08 95       	ret
		case 4:	blinking_times.ton  = 500;	 blinking_times.toff=500;  //blinking_time_mode++;
 1ba:	e0 e6       	ldi	r30, 0x60	; 96
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	84 ef       	ldi	r24, 0xF4	; 244
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	91 83       	std	Z+1, r25	; 0x01
 1c4:	80 83       	st	Z, r24
 1c6:	93 83       	std	Z+3, r25	; 0x03
 1c8:	82 83       	std	Z+2, r24	; 0x02
		break;
 1ca:	08 95       	ret
		case 5:	blinking_times.ton  = 800;	 blinking_times.toff=200;  //blinking_time_mode++;
 1cc:	e0 e6       	ldi	r30, 0x60	; 96
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 e2       	ldi	r24, 0x20	; 32
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	93 83       	std	Z+3, r25	; 0x03
 1de:	82 83       	std	Z+2, r24	; 0x02
		break;
 1e0:	08 95       	ret
		default:blinking_times.ton =  100;       blinking_times.toff=900;  blinking_time_mode=1;
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	91 83       	std	Z+1, r25	; 0x01
 1ec:	80 83       	st	Z, r24
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	93 e0       	ldi	r25, 0x03	; 3
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <blinking_time_mode+0x1>
 1fe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <blinking_time_mode>
 202:	08 95       	ret

00000204 <app_start_v3>:

void app_start_v3 (void)
{
	while(1)
	{
		LEDS_blink(blinking_leds_mode,blinking_times.ton,blinking_times.toff);
 204:	e0 e6       	ldi	r30, 0x60	; 96
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	42 81       	ldd	r20, Z+2	; 0x02
 20a:	53 81       	ldd	r21, Z+3	; 0x03
 20c:	60 81       	ld	r22, Z
 20e:	71 81       	ldd	r23, Z+1	; 0x01
 210:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <blinking_leds_mode>
 214:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <blinking_leds_mode+0x1>
 218:	0e 94 57 01 	call	0x2ae	; 0x2ae <LEDS_blink>
 21c:	f3 cf       	rjmp	.-26     	; 0x204 <app_start_v3>

0000021e <app_init>:



 void app_init(void)
 { 
	 GLOBALE_ENABLE();
 21e:	78 94       	sei
	 TIMER0_Init(TIMER0_NORMAL_MODE);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 67 03 	call	0x6ce	; 0x6ce <TIMER0_Init>
     LED_init(LED1);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_init>
	 LED_init(LED2);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_init>
	 LED_init(LED3);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_init>
	 LED_init(LED4);
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_init>
	 BUTTON_init(PC,button1);
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	0e 94 44 01 	call	0x288	; 0x288 <BUTTON_init>
	 BUTTON_init(PD,button2);
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 44 01 	call	0x288	; 0x288 <BUTTON_init>
	 BUTTON_init(PD,button3);
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	0e 94 44 01 	call	0x288	; 0x288 <BUTTON_init>
	// BUTTON_init(PB,button4);
	 	  	EXI_Enable(EX_INT0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 65 02 	call	0x4ca	; 0x4ca <EXI_Enable>
	 	  	EXI_TriggerEdge(EX_INT0,RISING_EDGE);
 25c:	63 e0       	ldi	r22, 0x03	; 3
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 77 02 	call	0x4ee	; 0x4ee <EXI_TriggerEdge>
	 	  	EXI_SetCallBack(EX_INT0,set_blinking_t_mode);
 264:	63 ea       	ldi	r22, 0xA3	; 163
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <EXI_SetCallBack>
	 	  	EXI_Enable(EX_INT1);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 65 02 	call	0x4ca	; 0x4ca <EXI_Enable>
	 	  	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
 274:	63 e0       	ldi	r22, 0x03	; 3
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 77 02 	call	0x4ee	; 0x4ee <EXI_TriggerEdge>
	 	  	EXI_SetCallBack(EX_INT1,set_leds_mode);
 27c:	69 e4       	ldi	r22, 0x49	; 73
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 d7 02 	call	0x5ae	; 0x5ae <EXI_SetCallBack>
 286:	08 95       	ret

00000288 <BUTTON_init>:
 #include "button.h"
en_buttonError_t BUTTON_init( DIO_Port_type port, u8 u8_PinNumber)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (u8_PinNumber <PIN_MAX && port<PORT_MAX)
 288:	68 30       	cpi	r22, 0x08	; 8
 28a:	38 f4       	brcc	.+14     	; 0x29a <BUTTON_init+0x12>
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	38 f4       	brcc	.+14     	; 0x29e <BUTTON_init+0x16>
	{    
				DIO_InitPin(port,u8_PinNumber,INFREE);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_InitPin>
				error = BUTTON_OK;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
	}
	else
	{
              error = WRONG_BUTTON_PIN;
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	08 95       	ret
 29e:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
}
 2a0:	08 95       	ret

000002a2 <LED_init>:
{
	LED_on(LED_N);
	timer_delay(on_t);
	LED_on(LED_N);
	timer_delay(off_t);
}
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	68 2f       	mov	r22, r24
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_InitPin>
 2ac:	08 95       	ret

000002ae <LEDS_blink>:
void LEDS_blink( u16 ledS_PINS , u16 on_t, u16 off_t)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ea 01       	movw	r28, r20
	PORTB=ledS_PINS;
 2b4:	88 bb       	out	0x18, r24	; 24
	timer_delay(on_t);
 2b6:	cb 01       	movw	r24, r22
 2b8:	0e 94 c3 03 	call	0x786	; 0x786 <timer_delay>
	PORTB=0;
 2bc:	18 ba       	out	0x18, r1	; 24
	timer_delay(off_t);
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 c3 03 	call	0x786	; 0x786 <timer_delay>
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <main>:


int main(void)
{ 
	
    app_init();
 2ca:	0e 94 0f 01 	call	0x21e	; 0x21e <app_init>
    app_start_v3();
 2ce:	0e 94 02 01 	call	0x204	; 0x204 <app_start_v3>
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <DIO_InitPin>:


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
	    if (u8_PinNumber < PIN_MAX)
 2d8:	68 30       	cpi	r22, 0x08	; 8
 2da:	08 f0       	brcs	.+2      	; 0x2de <DIO_InitPin+0x6>
 2dc:	ec c0       	rjmp	.+472    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
	    {

		    switch(status)
 2de:	41 30       	cpi	r20, 0x01	; 1
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <DIO_InitPin+0xc>
 2e2:	51 c0       	rjmp	.+162    	; 0x386 <DIO_InitPin+0xae>
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <DIO_InitPin+0x16>
 2e6:	42 30       	cpi	r20, 0x02	; 2
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_InitPin+0x14>
 2ea:	99 c0       	rjmp	.+306    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 2ec:	e6 c0       	rjmp	.+460    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		    {
			    case OUTPUT:
			    switch(port)
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	b9 f0       	breq	.+46     	; 0x320 <DIO_InitPin+0x48>
 2f2:	28 f0       	brcs	.+10     	; 0x2fe <DIO_InitPin+0x26>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	29 f1       	breq	.+74     	; 0x342 <DIO_InitPin+0x6a>
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	a1 f1       	breq	.+104    	; 0x364 <DIO_InitPin+0x8c>
 2fc:	e0 c0       	rjmp	.+448    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			    {
				    case PA:
				    SET_BIT( DDRA,u8_PinNumber);
 2fe:	2a b3       	in	r18, 0x1a	; 26
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_InitPin+0x32>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_InitPin+0x2e>
 30e:	92 2f       	mov	r25, r18
 310:	98 2b       	or	r25, r24
 312:	9a bb       	out	0x1a, r25	; 26
				    CLR_BIT( PORTA,u8_PinNumber);
 314:	9b b3       	in	r25, 0x1b	; 27
 316:	80 95       	com	r24
 318:	89 23       	and	r24, r25
 31a:	8b bb       	out	0x1b, r24	; 27
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 31c:	80 e0       	ldi	r24, 0x00	; 0
			    switch(port)
			    {
				    case PA:
				    SET_BIT( DDRA,u8_PinNumber);
				    CLR_BIT( PORTA,u8_PinNumber);
				    break;
 31e:	08 95       	ret
				    case PB:
				    SET_BIT( DDRB,u8_PinNumber);
 320:	27 b3       	in	r18, 0x17	; 23
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_InitPin+0x54>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_InitPin+0x50>
 330:	92 2f       	mov	r25, r18
 332:	98 2b       	or	r25, r24
 334:	97 bb       	out	0x17, r25	; 23
				    CLR_BIT(PORTB,u8_PinNumber);
 336:	98 b3       	in	r25, 0x18	; 24
 338:	80 95       	com	r24
 33a:	89 23       	and	r24, r25
 33c:	88 bb       	out	0x18, r24	; 24
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 33e:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT( PORTA,u8_PinNumber);
				    break;
				    case PB:
				    SET_BIT( DDRB,u8_PinNumber);
				    CLR_BIT(PORTB,u8_PinNumber);
				    break;
 340:	08 95       	ret
				    case PC:
				    SET_BIT( DDRC,u8_PinNumber);
 342:	24 b3       	in	r18, 0x14	; 20
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_InitPin+0x76>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_InitPin+0x72>
 352:	92 2f       	mov	r25, r18
 354:	98 2b       	or	r25, r24
 356:	94 bb       	out	0x14, r25	; 20
				    CLR_BIT(PORTC,u8_PinNumber);
 358:	95 b3       	in	r25, 0x15	; 21
 35a:	80 95       	com	r24
 35c:	89 23       	and	r24, r25
 35e:	85 bb       	out	0x15, r24	; 21
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 360:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTB,u8_PinNumber);
				    break;
				    case PC:
				    SET_BIT( DDRC,u8_PinNumber);
				    CLR_BIT(PORTC,u8_PinNumber);
				    break;
 362:	08 95       	ret
				    case PD:
				    SET_BIT( DDRD,u8_PinNumber);
 364:	21 b3       	in	r18, 0x11	; 17
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_InitPin+0x98>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_InitPin+0x94>
 374:	92 2f       	mov	r25, r18
 376:	98 2b       	or	r25, r24
 378:	91 bb       	out	0x11, r25	; 17
				    CLR_BIT(PORTD,u8_PinNumber);
 37a:	92 b3       	in	r25, 0x12	; 18
 37c:	80 95       	com	r24
 37e:	89 23       	and	r24, r25
 380:	82 bb       	out	0x12, r24	; 18
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 382:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTC,u8_PinNumber);
				    break;
				    case PD:
				    SET_BIT( DDRD,u8_PinNumber);
				    CLR_BIT(PORTD,u8_PinNumber);
				    break;
 384:	08 95       	ret
				    error = WRONG_PortNumber;
				    break;
			    }
			    break;
			    case INFREE:
			    switch(port)
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	b9 f0       	breq	.+46     	; 0x3b8 <DIO_InitPin+0xe0>
 38a:	28 f0       	brcs	.+10     	; 0x396 <DIO_InitPin+0xbe>
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	29 f1       	breq	.+74     	; 0x3da <DIO_InitPin+0x102>
 390:	83 30       	cpi	r24, 0x03	; 3
 392:	a1 f1       	breq	.+104    	; 0x3fc <DIO_InitPin+0x124>
 394:	96 c0       	rjmp	.+300    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			    {
				    case PA:
				    CLR_BIT(DDRA,u8_PinNumber);
 396:	2a b3       	in	r18, 0x1a	; 26
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_InitPin+0xca>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_InitPin+0xc6>
 3a6:	80 95       	com	r24
 3a8:	92 2f       	mov	r25, r18
 3aa:	98 23       	and	r25, r24
 3ac:	9a bb       	out	0x1a, r25	; 26
				    CLR_BIT(PORTA,u8_PinNumber);
 3ae:	9b b3       	in	r25, 0x1b	; 27
 3b0:	89 23       	and	r24, r25
 3b2:	8b bb       	out	0x1b, r24	; 27
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
			    switch(port)
			    {
				    case PA:
				    CLR_BIT(DDRA,u8_PinNumber);
				    CLR_BIT(PORTA,u8_PinNumber);
				    break;
 3b6:	08 95       	ret
				    case PB:
				    CLR_BIT(DDRB,u8_PinNumber);
 3b8:	27 b3       	in	r18, 0x17	; 23
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_InitPin+0xec>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_InitPin+0xe8>
 3c8:	80 95       	com	r24
 3ca:	92 2f       	mov	r25, r18
 3cc:	98 23       	and	r25, r24
 3ce:	97 bb       	out	0x17, r25	; 23
				    CLR_BIT(PORTB,u8_PinNumber);
 3d0:	98 b3       	in	r25, 0x18	; 24
 3d2:	89 23       	and	r24, r25
 3d4:	88 bb       	out	0x18, r24	; 24
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTA,u8_PinNumber);
				    break;
				    case PB:
				    CLR_BIT(DDRB,u8_PinNumber);
				    CLR_BIT(PORTB,u8_PinNumber);
				    break;
 3d8:	08 95       	ret
				    case PC:
				    CLR_BIT(DDRC,u8_PinNumber);
 3da:	24 b3       	in	r18, 0x14	; 20
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_InitPin+0x10e>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_InitPin+0x10a>
 3ea:	80 95       	com	r24
 3ec:	92 2f       	mov	r25, r18
 3ee:	98 23       	and	r25, r24
 3f0:	94 bb       	out	0x14, r25	; 20
				    CLR_BIT(PORTC,u8_PinNumber);
 3f2:	95 b3       	in	r25, 0x15	; 21
 3f4:	89 23       	and	r24, r25
 3f6:	85 bb       	out	0x15, r24	; 21
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTB,u8_PinNumber);
				    break;
				    case PC:
				    CLR_BIT(DDRC,u8_PinNumber);
				    CLR_BIT(PORTC,u8_PinNumber);
				    break;
 3fa:	08 95       	ret
				    case PD:
				    CLR_BIT(DDRD,u8_PinNumber);
 3fc:	21 b3       	in	r18, 0x11	; 17
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	80 95       	com	r24
 40e:	92 2f       	mov	r25, r18
 410:	98 23       	and	r25, r24
 412:	91 bb       	out	0x11, r25	; 17
				    CLR_BIT(PORTD,u8_PinNumber);
 414:	92 b3       	in	r25, 0x12	; 18
 416:	89 23       	and	r24, r25
 418:	82 bb       	out	0x12, r24	; 18
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 41a:	80 e0       	ldi	r24, 0x00	; 0
				    CLR_BIT(PORTC,u8_PinNumber);
				    break;
				    case PD:
				    CLR_BIT(DDRD,u8_PinNumber);
				    CLR_BIT(PORTD,u8_PinNumber);
				    break;
 41c:	08 95       	ret
				    break;
			    }
			    break;

			    case INPULL:
			    switch(port)
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	b9 f0       	breq	.+46     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 422:	28 f0       	brcs	.+10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	29 f1       	breq	.+74     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	a1 f1       	breq	.+104    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 42c:	4c c0       	rjmp	.+152    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
			    {
				    case PA:
				    CLR_BIT(DDRA,u8_PinNumber);
 42e:	2a b3       	in	r18, 0x1a	; 26
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	98 2f       	mov	r25, r24
 440:	90 95       	com	r25
 442:	92 23       	and	r25, r18
 444:	9a bb       	out	0x1a, r25	; 26
				    SET_BIT(PORTA,u8_PinNumber);
 446:	9b b3       	in	r25, 0x1b	; 27
 448:	89 2b       	or	r24, r25
 44a:	8b bb       	out	0x1b, r24	; 27
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 44c:	80 e0       	ldi	r24, 0x00	; 0
			    switch(port)
			    {
				    case PA:
				    CLR_BIT(DDRA,u8_PinNumber);
				    SET_BIT(PORTA,u8_PinNumber);
				    break;
 44e:	08 95       	ret
				    case PB:
				    CLR_BIT(DDRB,u8_PinNumber);
 450:	27 b3       	in	r18, 0x17	; 23
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	98 2f       	mov	r25, r24
 462:	90 95       	com	r25
 464:	92 23       	and	r25, r18
 466:	97 bb       	out	0x17, r25	; 23
				    SET_BIT(PORTB,u8_PinNumber);
 468:	98 b3       	in	r25, 0x18	; 24
 46a:	89 2b       	or	r24, r25
 46c:	88 bb       	out	0x18, r24	; 24
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 46e:	80 e0       	ldi	r24, 0x00	; 0
				    SET_BIT(PORTA,u8_PinNumber);
				    break;
				    case PB:
				    CLR_BIT(DDRB,u8_PinNumber);
				    SET_BIT(PORTB,u8_PinNumber);
				    break;
 470:	08 95       	ret
				    case PC:
				    CLR_BIT(DDRC,u8_PinNumber);
 472:	24 b3       	in	r18, 0x14	; 20
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	98 2f       	mov	r25, r24
 484:	90 95       	com	r25
 486:	92 23       	and	r25, r18
 488:	94 bb       	out	0x14, r25	; 20
				    SET_BIT(PORTC,u8_PinNumber);
 48a:	95 b3       	in	r25, 0x15	; 21
 48c:	89 2b       	or	r24, r25
 48e:	85 bb       	out	0x15, r24	; 21
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 490:	80 e0       	ldi	r24, 0x00	; 0
				    SET_BIT(PORTB,u8_PinNumber);
				    break;
				    case PC:
				    CLR_BIT(DDRC,u8_PinNumber);
				    SET_BIT(PORTC,u8_PinNumber);
				    break;
 492:	08 95       	ret
				    case PD:
				    CLR_BIT(DDRD,u8_PinNumber);
 494:	21 b3       	in	r18, 0x11	; 17
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	98 2f       	mov	r25, r24
 4a6:	90 95       	com	r25
 4a8:	92 23       	and	r25, r18
 4aa:	91 bb       	out	0x11, r25	; 17
				    SET_BIT(PORTD,u8_PinNumber);
 4ac:	92 b3       	in	r25, 0x12	; 18
 4ae:	89 2b       	or	r24, r25
 4b0:	82 bb       	out	0x12, r24	; 18
#include "dio.h"


    en_dioError_t  DIO_InitPin  (DIO_Port_type port, u8 u8_PinNumber, DIO_PinStatus_type status)	
    {
	    en_dioError_t error = DIO_OK;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
				    SET_BIT(PORTC,u8_PinNumber);
				    break;
				    case PD:
				    CLR_BIT(DDRD,u8_PinNumber);
				    SET_BIT(PORTD,u8_PinNumber);
				    break;
 4b4:	08 95       	ret
			    break;
		    }
	    }
	    else
	    {
		    error = WRONG_PinNumber;
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	08 95       	ret
				    error = WRONG_PortNumber;
				    break;
			    }
			    break;
			    default:
			    error  = WRONG_PortNumber;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	08 95       	ret
				    case PD:
				    SET_BIT( DDRD,u8_PinNumber);
				    CLR_BIT(PORTD,u8_PinNumber);
				    break;
				    default:
				    error = WRONG_PortNumber;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	08 95       	ret
				    case PD:
				    CLR_BIT(DDRD,u8_PinNumber);
				    CLR_BIT(PORTD,u8_PinNumber);
				    break;
				    default:
				    error = WRONG_PortNumber;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
				    case PD:
				    CLR_BIT(DDRD,u8_PinNumber);
				    SET_BIT(PORTD,u8_PinNumber);
				    break;
				    default:
				    error = WRONG_PortNumber;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;

    }
 4c8:	08 95       	ret

000004ca <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	41 f0       	breq	.+16     	; 0x4de <EXI_Enable+0x14>
 4ce:	18 f0       	brcs	.+6      	; 0x4d6 <EXI_Enable+0xc>
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	49 f0       	breq	.+18     	; 0x4e6 <EXI_Enable+0x1c>
 4d4:	08 95       	ret
 4d6:	8b b7       	in	r24, 0x3b	; 59
 4d8:	80 64       	ori	r24, 0x40	; 64
 4da:	8b bf       	out	0x3b, r24	; 59
 4dc:	08 95       	ret
 4de:	8b b7       	in	r24, 0x3b	; 59
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	8b bf       	out	0x3b, r24	; 59
 4e4:	08 95       	ret
 4e6:	8b b7       	in	r24, 0x3b	; 59
 4e8:	80 62       	ori	r24, 0x20	; 32
 4ea:	8b bf       	out	0x3b, r24	; 59
 4ec:	08 95       	ret

000004ee <EXI_TriggerEdge>:
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	49 f1       	breq	.+82     	; 0x544 <EXI_TriggerEdge+0x56>
 4f2:	20 f0       	brcs	.+8      	; 0x4fc <EXI_TriggerEdge+0xe>
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	09 f4       	brne	.+2      	; 0x4fa <EXI_TriggerEdge+0xc>
 4f8:	49 c0       	rjmp	.+146    	; 0x58c <EXI_TriggerEdge+0x9e>
 4fa:	08 95       	ret
 4fc:	61 30       	cpi	r22, 0x01	; 1
 4fe:	69 f0       	breq	.+26     	; 0x51a <EXI_TriggerEdge+0x2c>
 500:	28 f0       	brcs	.+10     	; 0x50c <EXI_TriggerEdge+0x1e>
 502:	62 30       	cpi	r22, 0x02	; 2
 504:	89 f0       	breq	.+34     	; 0x528 <EXI_TriggerEdge+0x3a>
 506:	63 30       	cpi	r22, 0x03	; 3
 508:	b1 f0       	breq	.+44     	; 0x536 <EXI_TriggerEdge+0x48>
 50a:	08 95       	ret
 50c:	85 b7       	in	r24, 0x35	; 53
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	85 bf       	out	0x35, r24	; 53
 512:	85 b7       	in	r24, 0x35	; 53
 514:	8d 7f       	andi	r24, 0xFD	; 253
 516:	85 bf       	out	0x35, r24	; 53
 518:	08 95       	ret
 51a:	85 b7       	in	r24, 0x35	; 53
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	85 bf       	out	0x35, r24	; 53
 520:	85 b7       	in	r24, 0x35	; 53
 522:	8d 7f       	andi	r24, 0xFD	; 253
 524:	85 bf       	out	0x35, r24	; 53
 526:	08 95       	ret
 528:	85 b7       	in	r24, 0x35	; 53
 52a:	8e 7f       	andi	r24, 0xFE	; 254
 52c:	85 bf       	out	0x35, r24	; 53
 52e:	85 b7       	in	r24, 0x35	; 53
 530:	82 60       	ori	r24, 0x02	; 2
 532:	85 bf       	out	0x35, r24	; 53
 534:	08 95       	ret
 536:	85 b7       	in	r24, 0x35	; 53
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	85 bf       	out	0x35, r24	; 53
 53c:	85 b7       	in	r24, 0x35	; 53
 53e:	82 60       	ori	r24, 0x02	; 2
 540:	85 bf       	out	0x35, r24	; 53
 542:	08 95       	ret
 544:	61 30       	cpi	r22, 0x01	; 1
 546:	69 f0       	breq	.+26     	; 0x562 <EXI_TriggerEdge+0x74>
 548:	28 f0       	brcs	.+10     	; 0x554 <EXI_TriggerEdge+0x66>
 54a:	62 30       	cpi	r22, 0x02	; 2
 54c:	89 f0       	breq	.+34     	; 0x570 <EXI_TriggerEdge+0x82>
 54e:	63 30       	cpi	r22, 0x03	; 3
 550:	b1 f0       	breq	.+44     	; 0x57e <EXI_TriggerEdge+0x90>
 552:	08 95       	ret
 554:	85 b7       	in	r24, 0x35	; 53
 556:	8b 7f       	andi	r24, 0xFB	; 251
 558:	85 bf       	out	0x35, r24	; 53
 55a:	85 b7       	in	r24, 0x35	; 53
 55c:	87 7f       	andi	r24, 0xF7	; 247
 55e:	85 bf       	out	0x35, r24	; 53
 560:	08 95       	ret
 562:	85 b7       	in	r24, 0x35	; 53
 564:	84 60       	ori	r24, 0x04	; 4
 566:	85 bf       	out	0x35, r24	; 53
 568:	85 b7       	in	r24, 0x35	; 53
 56a:	87 7f       	andi	r24, 0xF7	; 247
 56c:	85 bf       	out	0x35, r24	; 53
 56e:	08 95       	ret
 570:	85 b7       	in	r24, 0x35	; 53
 572:	8b 7f       	andi	r24, 0xFB	; 251
 574:	85 bf       	out	0x35, r24	; 53
 576:	85 b7       	in	r24, 0x35	; 53
 578:	88 60       	ori	r24, 0x08	; 8
 57a:	85 bf       	out	0x35, r24	; 53
 57c:	08 95       	ret
 57e:	85 b7       	in	r24, 0x35	; 53
 580:	84 60       	ori	r24, 0x04	; 4
 582:	85 bf       	out	0x35, r24	; 53
 584:	85 b7       	in	r24, 0x35	; 53
 586:	88 60       	ori	r24, 0x08	; 8
 588:	85 bf       	out	0x35, r24	; 53
 58a:	08 95       	ret
 58c:	62 30       	cpi	r22, 0x02	; 2
 58e:	19 f0       	breq	.+6      	; 0x596 <EXI_TriggerEdge+0xa8>
 590:	63 30       	cpi	r22, 0x03	; 3
 592:	29 f0       	breq	.+10     	; 0x59e <EXI_TriggerEdge+0xb0>
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <EXI_TriggerEdge+0xb8>
 596:	84 b7       	in	r24, 0x34	; 52
 598:	8f 7b       	andi	r24, 0xBF	; 191
 59a:	84 bf       	out	0x34, r24	; 52
 59c:	08 95       	ret
 59e:	84 b7       	in	r24, 0x34	; 52
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	84 bf       	out	0x34, r24	; 52
 5a4:	08 95       	ret
 5a6:	84 b7       	in	r24, 0x34	; 52
 5a8:	8f 7b       	andi	r24, 0xBF	; 191
 5aa:	84 bf       	out	0x34, r24	; 52
 5ac:	08 95       	ret

000005ae <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	49 f0       	breq	.+18     	; 0x5c4 <EXI_SetCallBack+0x16>
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <EXI_SetCallBack+0xc>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	59 f0       	breq	.+22     	; 0x5ce <EXI_SetCallBack+0x20>
 5b8:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 5ba:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <INT0_Fptr+0x1>
 5be:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <INT0_Fptr>
		break;
 5c2:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 5c4:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <INT1_Fptr+0x1>
 5c8:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <INT1_Fptr>
		break;
 5cc:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 5ce:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <INT2_Fptr+0x1>
 5d2:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <INT2_Fptr>
 5d6:	08 95       	ret

000005d8 <__vector_1>:




ISR(INT0_vect)
{  
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 5fa:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <INT0_Fptr>
 5fe:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <INT0_Fptr+0x1>
 602:	30 97       	sbiw	r30, 0x00	; 0
 604:	09 f0       	breq	.+2      	; 0x608 <__vector_1+0x30>
	{
		INT0_Fptr();
 606:	09 95       	icall
	}
}
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <__vector_2>:
ISR(INT1_vect)
{
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 64c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <INT1_Fptr>
 650:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <INT1_Fptr+0x1>
 654:	30 97       	sbiw	r30, 0x00	; 0
 656:	09 f0       	breq	.+2      	; 0x65a <__vector_2+0x30>
	{
		INT1_Fptr();
 658:	09 95       	icall
	}
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <__vector_3>:
ISR(INT2_vect)
{
 67c:	1f 92       	push	r1
 67e:	0f 92       	push	r0
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	0f 92       	push	r0
 684:	11 24       	eor	r1, r1
 686:	2f 93       	push	r18
 688:	3f 93       	push	r19
 68a:	4f 93       	push	r20
 68c:	5f 93       	push	r21
 68e:	6f 93       	push	r22
 690:	7f 93       	push	r23
 692:	8f 93       	push	r24
 694:	9f 93       	push	r25
 696:	af 93       	push	r26
 698:	bf 93       	push	r27
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 69e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <INT2_Fptr>
 6a2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <INT2_Fptr+0x1>
 6a6:	30 97       	sbiw	r30, 0x00	; 0
 6a8:	09 f0       	breq	.+2      	; 0x6ac <__vector_3+0x30>
	{
		INT2_Fptr();
 6aa:	09 95       	icall
	}
}
 6ac:	ff 91       	pop	r31
 6ae:	ef 91       	pop	r30
 6b0:	bf 91       	pop	r27
 6b2:	af 91       	pop	r26
 6b4:	9f 91       	pop	r25
 6b6:	8f 91       	pop	r24
 6b8:	7f 91       	pop	r23
 6ba:	6f 91       	pop	r22
 6bc:	5f 91       	pop	r21
 6be:	4f 91       	pop	r20
 6c0:	3f 91       	pop	r19
 6c2:	2f 91       	pop	r18
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

000006ce <TIMER0_Init>:
{
	SET_BIT(TIMSK,OCIE0);
}
void TIMER0_OC_InterruptDisable(void)
{
	CLR_BIT(TIMSK,OCIE0);
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	69 f0       	breq	.+26     	; 0x6ec <TIMER0_Init+0x1e>
 6d2:	28 f0       	brcs	.+10     	; 0x6de <TIMER0_Init+0x10>
 6d4:	82 30       	cpi	r24, 0x02	; 2
 6d6:	89 f0       	breq	.+34     	; 0x6fa <TIMER0_Init+0x2c>
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	b1 f0       	breq	.+44     	; 0x708 <TIMER0_Init+0x3a>
 6dc:	1c c0       	rjmp	.+56     	; 0x716 <TIMER0_Init+0x48>
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	8f 7b       	andi	r24, 0xBF	; 191
 6e2:	83 bf       	out	0x33, r24	; 51
 6e4:	83 b7       	in	r24, 0x33	; 51
 6e6:	87 7f       	andi	r24, 0xF7	; 247
 6e8:	83 bf       	out	0x33, r24	; 51
 6ea:	17 c0       	rjmp	.+46     	; 0x71a <TIMER0_Init+0x4c>
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	80 64       	ori	r24, 0x40	; 64
 6f0:	83 bf       	out	0x33, r24	; 51
 6f2:	83 b7       	in	r24, 0x33	; 51
 6f4:	87 7f       	andi	r24, 0xF7	; 247
 6f6:	83 bf       	out	0x33, r24	; 51
 6f8:	10 c0       	rjmp	.+32     	; 0x71a <TIMER0_Init+0x4c>
 6fa:	83 b7       	in	r24, 0x33	; 51
 6fc:	8f 7b       	andi	r24, 0xBF	; 191
 6fe:	83 bf       	out	0x33, r24	; 51
 700:	83 b7       	in	r24, 0x33	; 51
 702:	88 60       	ori	r24, 0x08	; 8
 704:	83 bf       	out	0x33, r24	; 51
 706:	09 c0       	rjmp	.+18     	; 0x71a <TIMER0_Init+0x4c>
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	80 64       	ori	r24, 0x40	; 64
 70c:	83 bf       	out	0x33, r24	; 51
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	88 60       	ori	r24, 0x08	; 8
 712:	83 bf       	out	0x33, r24	; 51
 714:	02 c0       	rjmp	.+4      	; 0x71a <TIMER0_Init+0x4c>
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	08 95       	ret
 71a:	08 95       	ret

0000071c <timer_start>:
 71c:	88 30       	cpi	r24, 0x08	; 8
 71e:	40 f4       	brcc	.+16     	; 0x730 <timer_start+0x14>
 720:	93 b7       	in	r25, 0x33	; 51
 722:	98 7f       	andi	r25, 0xF8	; 248
 724:	93 bf       	out	0x33, r25	; 51
 726:	93 b7       	in	r25, 0x33	; 51
 728:	89 2b       	or	r24, r25
 72a:	83 bf       	out	0x33, r24	; 51
 72c:	84 e0       	ldi	r24, 0x04	; 4
 72e:	08 95       	ret
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret

00000734 <__vector_11>:
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
 756:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer0_OVF_Fptr>
 75a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer0_OVF_Fptr+0x1>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_11+0x30>
 762:	09 95       	icall
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <timer_delay>:




EN_timerError_t timer_delay(u16 Delay)
{
 786:	cf 92       	push	r12
 788:	df 92       	push	r13
 78a:	ef 92       	push	r14
 78c:	ff 92       	push	r15
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
	double CPU_F = F_CPU;
	double oneTickTime = (8 / CPU_F ) * 1000; // in ms
	double maxDelay = oneTickTime * 256; // in ms
	int overflowsCount =(u32)((Delay / maxDelay));
 792:	bc 01       	movw	r22, r24
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatunsisf>
 79c:	6b 01       	movw	r12, r22
 79e:	7c 01       	movw	r14, r24
 7a0:	2f e6       	ldi	r18, 0x6F	; 111
 7a2:	32 e1       	ldi	r19, 0x12	; 18
 7a4:	43 e8       	ldi	r20, 0x83	; 131
 7a6:	5e e3       	ldi	r21, 0x3E	; 62
 7a8:	0e 94 99 04 	call	0x932	; 0x932 <__divsf3>
 7ac:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixunssfsi>
 7b0:	eb 01       	movw	r28, r22
	u8 timerInitValue;
	if (overflowsCount > 1)
 7b2:	62 30       	cpi	r22, 0x02	; 2
 7b4:	71 05       	cpc	r23, r1
 7b6:	2c f1       	brlt	.+74     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		timerInitValue = (u8)(256 - ((Delay - (maxDelay * (overflowsCount - 1))) / oneTickTime));
 7b8:	61 50       	subi	r22, 0x01	; 1
 7ba:	71 09       	sbc	r23, r1
 7bc:	07 2e       	mov	r0, r23
 7be:	00 0c       	add	r0, r0
 7c0:	88 0b       	sbc	r24, r24
 7c2:	99 0b       	sbc	r25, r25
 7c4:	0e 94 3c 05 	call	0xa78	; 0xa78 <__floatsisf>
 7c8:	2f e6       	ldi	r18, 0x6F	; 111
 7ca:	32 e1       	ldi	r19, 0x12	; 18
 7cc:	43 e8       	ldi	r20, 0x83	; 131
 7ce:	5e e3       	ldi	r21, 0x3E	; 62
 7d0:	0e 94 c8 05 	call	0xb90	; 0xb90 <__mulsf3>
 7d4:	9b 01       	movw	r18, r22
 7d6:	ac 01       	movw	r20, r24
 7d8:	c7 01       	movw	r24, r14
 7da:	b6 01       	movw	r22, r12
 7dc:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 7e0:	2f e6       	ldi	r18, 0x6F	; 111
 7e2:	32 e1       	ldi	r19, 0x12	; 18
 7e4:	43 e8       	ldi	r20, 0x83	; 131
 7e6:	5a e3       	ldi	r21, 0x3A	; 58
 7e8:	0e 94 99 04 	call	0x932	; 0x932 <__divsf3>
 7ec:	9b 01       	movw	r18, r22
 7ee:	ac 01       	movw	r20, r24
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	80 e8       	ldi	r24, 0x80	; 128
 7f6:	93 e4       	ldi	r25, 0x43	; 67
 7f8:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 7fc:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixunssfsi>
 800:	10 c0       	rjmp	.+32     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	}
	else
	{
		timerInitValue = (u8)((maxDelay - Delay)/oneTickTime);
 802:	a7 01       	movw	r20, r14
 804:	96 01       	movw	r18, r12
 806:	6f e6       	ldi	r22, 0x6F	; 111
 808:	72 e1       	ldi	r23, 0x12	; 18
 80a:	83 e8       	ldi	r24, 0x83	; 131
 80c:	9e e3       	ldi	r25, 0x3E	; 62
 80e:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 812:	2f e6       	ldi	r18, 0x6F	; 111
 814:	32 e1       	ldi	r19, 0x12	; 18
 816:	43 e8       	ldi	r20, 0x83	; 131
 818:	5a e3       	ldi	r21, 0x3A	; 58
 81a:	0e 94 99 04 	call	0x932	; 0x932 <__divsf3>
 81e:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixunssfsi>
	}
	TCNT0 = timerInitValue;
 822:	62 bf       	out	0x32, r22	; 50

	timer_start(TIMER0_SCALER_8);
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	0e 94 8e 03 	call	0x71c	; 0x71c <timer_start>


	while(overflowsCount--)
 82a:	07 c0       	rjmp	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
	{
		while((READ_BIT(TIFR, 0)) == 0);
 82c:	08 b6       	in	r0, 0x38	; 56
 82e:	00 fe       	sbrs	r0, 0
 830:	fd cf       	rjmp	.-6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		
		SET_BIT(TIFR, 0);
 832:	88 b7       	in	r24, 0x38	; 56
 834:	81 60       	ori	r24, 0x01	; 1
 836:	88 bf       	out	0x38, r24	; 56
	TCNT0 = timerInitValue;

	timer_start(TIMER0_SCALER_8);


	while(overflowsCount--)
 838:	e9 01       	movw	r28, r18
 83a:	9e 01       	movw	r18, r28
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	31 09       	sbc	r19, r1
 840:	cd 2b       	or	r28, r29
 842:	a1 f7       	brne	.-24     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		while((READ_BIT(TIFR, 0)) == 0);
		
		SET_BIT(TIFR, 0);
	}

	TCCR0 &= ~((1 << CS01) | (1 << CS00));
 844:	83 b7       	in	r24, 0x33	; 51
 846:	8c 7f       	andi	r24, 0xFC	; 252
 848:	83 bf       	out	0x33, r24	; 51
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	df 90       	pop	r13
 854:	cf 90       	pop	r12
 856:	08 95       	ret

00000858 <__subsf3>:
 858:	50 58       	subi	r21, 0x80	; 128

0000085a <__addsf3>:
 85a:	bb 27       	eor	r27, r27
 85c:	aa 27       	eor	r26, r26
 85e:	0e 94 44 04 	call	0x888	; 0x888 <__addsf3x>
 862:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_round>
 866:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_pscA>
 86a:	38 f0       	brcs	.+14     	; 0x87a <__stack+0x1b>
 86c:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_pscB>
 870:	20 f0       	brcs	.+8      	; 0x87a <__stack+0x1b>
 872:	39 f4       	brne	.+14     	; 0x882 <__stack+0x23>
 874:	9f 3f       	cpi	r25, 0xFF	; 255
 876:	19 f4       	brne	.+6      	; 0x87e <__stack+0x1f>
 878:	26 f4       	brtc	.+8      	; 0x882 <__stack+0x23>
 87a:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_nan>
 87e:	0e f4       	brtc	.+2      	; 0x882 <__stack+0x23>
 880:	e0 95       	com	r30
 882:	e7 fb       	bst	r30, 7
 884:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_inf>

00000888 <__addsf3x>:
 888:	e9 2f       	mov	r30, r25
 88a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_split3>
 88e:	58 f3       	brcs	.-42     	; 0x866 <__stack+0x7>
 890:	ba 17       	cp	r27, r26
 892:	62 07       	cpc	r22, r18
 894:	73 07       	cpc	r23, r19
 896:	84 07       	cpc	r24, r20
 898:	95 07       	cpc	r25, r21
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__addsf3x+0x1c>
 89c:	79 f4       	brne	.+30     	; 0x8bc <__addsf3x+0x34>
 89e:	a6 f5       	brtc	.+104    	; 0x908 <__addsf3x+0x80>
 8a0:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_zero>
 8a4:	0e f4       	brtc	.+2      	; 0x8a8 <__addsf3x+0x20>
 8a6:	e0 95       	com	r30
 8a8:	0b 2e       	mov	r0, r27
 8aa:	ba 2f       	mov	r27, r26
 8ac:	a0 2d       	mov	r26, r0
 8ae:	0b 01       	movw	r0, r22
 8b0:	b9 01       	movw	r22, r18
 8b2:	90 01       	movw	r18, r0
 8b4:	0c 01       	movw	r0, r24
 8b6:	ca 01       	movw	r24, r20
 8b8:	a0 01       	movw	r20, r0
 8ba:	11 24       	eor	r1, r1
 8bc:	ff 27       	eor	r31, r31
 8be:	59 1b       	sub	r21, r25
 8c0:	99 f0       	breq	.+38     	; 0x8e8 <__addsf3x+0x60>
 8c2:	59 3f       	cpi	r21, 0xF9	; 249
 8c4:	50 f4       	brcc	.+20     	; 0x8da <__addsf3x+0x52>
 8c6:	50 3e       	cpi	r21, 0xE0	; 224
 8c8:	68 f1       	brcs	.+90     	; 0x924 <__addsf3x+0x9c>
 8ca:	1a 16       	cp	r1, r26
 8cc:	f0 40       	sbci	r31, 0x00	; 0
 8ce:	a2 2f       	mov	r26, r18
 8d0:	23 2f       	mov	r18, r19
 8d2:	34 2f       	mov	r19, r20
 8d4:	44 27       	eor	r20, r20
 8d6:	58 5f       	subi	r21, 0xF8	; 248
 8d8:	f3 cf       	rjmp	.-26     	; 0x8c0 <__addsf3x+0x38>
 8da:	46 95       	lsr	r20
 8dc:	37 95       	ror	r19
 8de:	27 95       	ror	r18
 8e0:	a7 95       	ror	r26
 8e2:	f0 40       	sbci	r31, 0x00	; 0
 8e4:	53 95       	inc	r21
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__addsf3x+0x52>
 8e8:	7e f4       	brtc	.+30     	; 0x908 <__addsf3x+0x80>
 8ea:	1f 16       	cp	r1, r31
 8ec:	ba 0b       	sbc	r27, r26
 8ee:	62 0b       	sbc	r22, r18
 8f0:	73 0b       	sbc	r23, r19
 8f2:	84 0b       	sbc	r24, r20
 8f4:	ba f0       	brmi	.+46     	; 0x924 <__addsf3x+0x9c>
 8f6:	91 50       	subi	r25, 0x01	; 1
 8f8:	a1 f0       	breq	.+40     	; 0x922 <__addsf3x+0x9a>
 8fa:	ff 0f       	add	r31, r31
 8fc:	bb 1f       	adc	r27, r27
 8fe:	66 1f       	adc	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	c2 f7       	brpl	.-16     	; 0x8f6 <__addsf3x+0x6e>
 906:	0e c0       	rjmp	.+28     	; 0x924 <__addsf3x+0x9c>
 908:	ba 0f       	add	r27, r26
 90a:	62 1f       	adc	r22, r18
 90c:	73 1f       	adc	r23, r19
 90e:	84 1f       	adc	r24, r20
 910:	48 f4       	brcc	.+18     	; 0x924 <__addsf3x+0x9c>
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	f7 95       	ror	r31
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	08 f0       	brcs	.+2      	; 0x922 <__addsf3x+0x9a>
 920:	b0 cf       	rjmp	.-160    	; 0x882 <__stack+0x23>
 922:	93 95       	inc	r25
 924:	88 0f       	add	r24, r24
 926:	08 f0       	brcs	.+2      	; 0x92a <__addsf3x+0xa2>
 928:	99 27       	eor	r25, r25
 92a:	ee 0f       	add	r30, r30
 92c:	97 95       	ror	r25
 92e:	87 95       	ror	r24
 930:	08 95       	ret

00000932 <__divsf3>:
 932:	0e 94 ad 04 	call	0x95a	; 0x95a <__divsf3x>
 936:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_round>
 93a:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_pscB>
 93e:	58 f0       	brcs	.+22     	; 0x956 <__divsf3+0x24>
 940:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_pscA>
 944:	40 f0       	brcs	.+16     	; 0x956 <__divsf3+0x24>
 946:	29 f4       	brne	.+10     	; 0x952 <__divsf3+0x20>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	29 f0       	breq	.+10     	; 0x956 <__divsf3+0x24>
 94c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_inf>
 950:	51 11       	cpse	r21, r1
 952:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_szero>
 956:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_nan>

0000095a <__divsf3x>:
 95a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_split3>
 95e:	68 f3       	brcs	.-38     	; 0x93a <__divsf3+0x8>

00000960 <__divsf3_pse>:
 960:	99 23       	and	r25, r25
 962:	b1 f3       	breq	.-20     	; 0x950 <__divsf3+0x1e>
 964:	55 23       	and	r21, r21
 966:	91 f3       	breq	.-28     	; 0x94c <__divsf3+0x1a>
 968:	95 1b       	sub	r25, r21
 96a:	55 0b       	sbc	r21, r21
 96c:	bb 27       	eor	r27, r27
 96e:	aa 27       	eor	r26, r26
 970:	62 17       	cp	r22, r18
 972:	73 07       	cpc	r23, r19
 974:	84 07       	cpc	r24, r20
 976:	38 f0       	brcs	.+14     	; 0x986 <__divsf3_pse+0x26>
 978:	9f 5f       	subi	r25, 0xFF	; 255
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	22 0f       	add	r18, r18
 97e:	33 1f       	adc	r19, r19
 980:	44 1f       	adc	r20, r20
 982:	aa 1f       	adc	r26, r26
 984:	a9 f3       	breq	.-22     	; 0x970 <__divsf3_pse+0x10>
 986:	35 d0       	rcall	.+106    	; 0x9f2 <__divsf3_pse+0x92>
 988:	0e 2e       	mov	r0, r30
 98a:	3a f0       	brmi	.+14     	; 0x99a <__divsf3_pse+0x3a>
 98c:	e0 e8       	ldi	r30, 0x80	; 128
 98e:	32 d0       	rcall	.+100    	; 0x9f4 <__divsf3_pse+0x94>
 990:	91 50       	subi	r25, 0x01	; 1
 992:	50 40       	sbci	r21, 0x00	; 0
 994:	e6 95       	lsr	r30
 996:	00 1c       	adc	r0, r0
 998:	ca f7       	brpl	.-14     	; 0x98c <__divsf3_pse+0x2c>
 99a:	2b d0       	rcall	.+86     	; 0x9f2 <__divsf3_pse+0x92>
 99c:	fe 2f       	mov	r31, r30
 99e:	29 d0       	rcall	.+82     	; 0x9f2 <__divsf3_pse+0x92>
 9a0:	66 0f       	add	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	bb 1f       	adc	r27, r27
 9a8:	26 17       	cp	r18, r22
 9aa:	37 07       	cpc	r19, r23
 9ac:	48 07       	cpc	r20, r24
 9ae:	ab 07       	cpc	r26, r27
 9b0:	b0 e8       	ldi	r27, 0x80	; 128
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <__divsf3_pse+0x56>
 9b4:	bb 0b       	sbc	r27, r27
 9b6:	80 2d       	mov	r24, r0
 9b8:	bf 01       	movw	r22, r30
 9ba:	ff 27       	eor	r31, r31
 9bc:	93 58       	subi	r25, 0x83	; 131
 9be:	5f 4f       	sbci	r21, 0xFF	; 255
 9c0:	3a f0       	brmi	.+14     	; 0x9d0 <__divsf3_pse+0x70>
 9c2:	9e 3f       	cpi	r25, 0xFE	; 254
 9c4:	51 05       	cpc	r21, r1
 9c6:	78 f0       	brcs	.+30     	; 0x9e6 <__divsf3_pse+0x86>
 9c8:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_inf>
 9cc:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_szero>
 9d0:	5f 3f       	cpi	r21, 0xFF	; 255
 9d2:	e4 f3       	brlt	.-8      	; 0x9cc <__divsf3_pse+0x6c>
 9d4:	98 3e       	cpi	r25, 0xE8	; 232
 9d6:	d4 f3       	brlt	.-12     	; 0x9cc <__divsf3_pse+0x6c>
 9d8:	86 95       	lsr	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f7 95       	ror	r31
 9e2:	9f 5f       	subi	r25, 0xFF	; 255
 9e4:	c9 f7       	brne	.-14     	; 0x9d8 <__divsf3_pse+0x78>
 9e6:	88 0f       	add	r24, r24
 9e8:	91 1d       	adc	r25, r1
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	97 f9       	bld	r25, 7
 9f0:	08 95       	ret
 9f2:	e1 e0       	ldi	r30, 0x01	; 1
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	bb 1f       	adc	r27, r27
 9fc:	62 17       	cp	r22, r18
 9fe:	73 07       	cpc	r23, r19
 a00:	84 07       	cpc	r24, r20
 a02:	ba 07       	cpc	r27, r26
 a04:	20 f0       	brcs	.+8      	; 0xa0e <__divsf3_pse+0xae>
 a06:	62 1b       	sub	r22, r18
 a08:	73 0b       	sbc	r23, r19
 a0a:	84 0b       	sbc	r24, r20
 a0c:	ba 0b       	sbc	r27, r26
 a0e:	ee 1f       	adc	r30, r30
 a10:	88 f7       	brcc	.-30     	; 0x9f4 <__divsf3_pse+0x94>
 a12:	e0 95       	com	r30
 a14:	08 95       	ret

00000a16 <__fixunssfsi>:
 a16:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__fp_splitA>
 a1a:	88 f0       	brcs	.+34     	; 0xa3e <__fixunssfsi+0x28>
 a1c:	9f 57       	subi	r25, 0x7F	; 127
 a1e:	98 f0       	brcs	.+38     	; 0xa46 <__fixunssfsi+0x30>
 a20:	b9 2f       	mov	r27, r25
 a22:	99 27       	eor	r25, r25
 a24:	b7 51       	subi	r27, 0x17	; 23
 a26:	b0 f0       	brcs	.+44     	; 0xa54 <__fixunssfsi+0x3e>
 a28:	e1 f0       	breq	.+56     	; 0xa62 <__fixunssfsi+0x4c>
 a2a:	66 0f       	add	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	1a f0       	brmi	.+6      	; 0xa3a <__fixunssfsi+0x24>
 a34:	ba 95       	dec	r27
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__fixunssfsi+0x14>
 a38:	14 c0       	rjmp	.+40     	; 0xa62 <__fixunssfsi+0x4c>
 a3a:	b1 30       	cpi	r27, 0x01	; 1
 a3c:	91 f0       	breq	.+36     	; 0xa62 <__fixunssfsi+0x4c>
 a3e:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_zero>
 a42:	b1 e0       	ldi	r27, 0x01	; 1
 a44:	08 95       	ret
 a46:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_zero>
 a4a:	67 2f       	mov	r22, r23
 a4c:	78 2f       	mov	r23, r24
 a4e:	88 27       	eor	r24, r24
 a50:	b8 5f       	subi	r27, 0xF8	; 248
 a52:	39 f0       	breq	.+14     	; 0xa62 <__fixunssfsi+0x4c>
 a54:	b9 3f       	cpi	r27, 0xF9	; 249
 a56:	cc f3       	brlt	.-14     	; 0xa4a <__fixunssfsi+0x34>
 a58:	86 95       	lsr	r24
 a5a:	77 95       	ror	r23
 a5c:	67 95       	ror	r22
 a5e:	b3 95       	inc	r27
 a60:	d9 f7       	brne	.-10     	; 0xa58 <__fixunssfsi+0x42>
 a62:	3e f4       	brtc	.+14     	; 0xa72 <__fixunssfsi+0x5c>
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__floatunsisf>:
 a74:	e8 94       	clt
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <__floatsisf+0x12>

00000a78 <__floatsisf>:
 a78:	97 fb       	bst	r25, 7
 a7a:	3e f4       	brtc	.+14     	; 0xa8a <__floatsisf+0x12>
 a7c:	90 95       	com	r25
 a7e:	80 95       	com	r24
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	99 23       	and	r25, r25
 a8c:	a9 f0       	breq	.+42     	; 0xab8 <__floatsisf+0x40>
 a8e:	f9 2f       	mov	r31, r25
 a90:	96 e9       	ldi	r25, 0x96	; 150
 a92:	bb 27       	eor	r27, r27
 a94:	93 95       	inc	r25
 a96:	f6 95       	lsr	r31
 a98:	87 95       	ror	r24
 a9a:	77 95       	ror	r23
 a9c:	67 95       	ror	r22
 a9e:	b7 95       	ror	r27
 aa0:	f1 11       	cpse	r31, r1
 aa2:	f8 cf       	rjmp	.-16     	; 0xa94 <__floatsisf+0x1c>
 aa4:	fa f4       	brpl	.+62     	; 0xae4 <__floatsisf+0x6c>
 aa6:	bb 0f       	add	r27, r27
 aa8:	11 f4       	brne	.+4      	; 0xaae <__floatsisf+0x36>
 aaa:	60 ff       	sbrs	r22, 0
 aac:	1b c0       	rjmp	.+54     	; 0xae4 <__floatsisf+0x6c>
 aae:	6f 5f       	subi	r22, 0xFF	; 255
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	16 c0       	rjmp	.+44     	; 0xae4 <__floatsisf+0x6c>
 ab8:	88 23       	and	r24, r24
 aba:	11 f0       	breq	.+4      	; 0xac0 <__floatsisf+0x48>
 abc:	96 e9       	ldi	r25, 0x96	; 150
 abe:	11 c0       	rjmp	.+34     	; 0xae2 <__floatsisf+0x6a>
 ac0:	77 23       	and	r23, r23
 ac2:	21 f0       	breq	.+8      	; 0xacc <__floatsisf+0x54>
 ac4:	9e e8       	ldi	r25, 0x8E	; 142
 ac6:	87 2f       	mov	r24, r23
 ac8:	76 2f       	mov	r23, r22
 aca:	05 c0       	rjmp	.+10     	; 0xad6 <__floatsisf+0x5e>
 acc:	66 23       	and	r22, r22
 ace:	71 f0       	breq	.+28     	; 0xaec <__floatsisf+0x74>
 ad0:	96 e8       	ldi	r25, 0x86	; 134
 ad2:	86 2f       	mov	r24, r22
 ad4:	70 e0       	ldi	r23, 0x00	; 0
 ad6:	60 e0       	ldi	r22, 0x00	; 0
 ad8:	2a f0       	brmi	.+10     	; 0xae4 <__floatsisf+0x6c>
 ada:	9a 95       	dec	r25
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	da f7       	brpl	.-10     	; 0xada <__floatsisf+0x62>
 ae4:	88 0f       	add	r24, r24
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret

00000aee <__fp_inf>:
 aee:	97 f9       	bld	r25, 7
 af0:	9f 67       	ori	r25, 0x7F	; 127
 af2:	80 e8       	ldi	r24, 0x80	; 128
 af4:	70 e0       	ldi	r23, 0x00	; 0
 af6:	60 e0       	ldi	r22, 0x00	; 0
 af8:	08 95       	ret

00000afa <__fp_nan>:
 afa:	9f ef       	ldi	r25, 0xFF	; 255
 afc:	80 ec       	ldi	r24, 0xC0	; 192
 afe:	08 95       	ret

00000b00 <__fp_pscA>:
 b00:	00 24       	eor	r0, r0
 b02:	0a 94       	dec	r0
 b04:	16 16       	cp	r1, r22
 b06:	17 06       	cpc	r1, r23
 b08:	18 06       	cpc	r1, r24
 b0a:	09 06       	cpc	r0, r25
 b0c:	08 95       	ret

00000b0e <__fp_pscB>:
 b0e:	00 24       	eor	r0, r0
 b10:	0a 94       	dec	r0
 b12:	12 16       	cp	r1, r18
 b14:	13 06       	cpc	r1, r19
 b16:	14 06       	cpc	r1, r20
 b18:	05 06       	cpc	r0, r21
 b1a:	08 95       	ret

00000b1c <__fp_round>:
 b1c:	09 2e       	mov	r0, r25
 b1e:	03 94       	inc	r0
 b20:	00 0c       	add	r0, r0
 b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0xc>
 b24:	88 23       	and	r24, r24
 b26:	52 f0       	brmi	.+20     	; 0xb3c <__fp_round+0x20>
 b28:	bb 0f       	add	r27, r27
 b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fp_round+0x20>
 b2c:	bf 2b       	or	r27, r31
 b2e:	11 f4       	brne	.+4      	; 0xb34 <__fp_round+0x18>
 b30:	60 ff       	sbrs	r22, 0
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <__fp_round+0x20>
 b34:	6f 5f       	subi	r22, 0xFF	; 255
 b36:	7f 4f       	sbci	r23, 0xFF	; 255
 b38:	8f 4f       	sbci	r24, 0xFF	; 255
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	08 95       	ret

00000b3e <__fp_split3>:
 b3e:	57 fd       	sbrc	r21, 7
 b40:	90 58       	subi	r25, 0x80	; 128
 b42:	44 0f       	add	r20, r20
 b44:	55 1f       	adc	r21, r21
 b46:	59 f0       	breq	.+22     	; 0xb5e <__fp_splitA+0x10>
 b48:	5f 3f       	cpi	r21, 0xFF	; 255
 b4a:	71 f0       	breq	.+28     	; 0xb68 <__fp_splitA+0x1a>
 b4c:	47 95       	ror	r20

00000b4e <__fp_splitA>:
 b4e:	88 0f       	add	r24, r24
 b50:	97 fb       	bst	r25, 7
 b52:	99 1f       	adc	r25, r25
 b54:	61 f0       	breq	.+24     	; 0xb6e <__fp_splitA+0x20>
 b56:	9f 3f       	cpi	r25, 0xFF	; 255
 b58:	79 f0       	breq	.+30     	; 0xb78 <__fp_splitA+0x2a>
 b5a:	87 95       	ror	r24
 b5c:	08 95       	ret
 b5e:	12 16       	cp	r1, r18
 b60:	13 06       	cpc	r1, r19
 b62:	14 06       	cpc	r1, r20
 b64:	55 1f       	adc	r21, r21
 b66:	f2 cf       	rjmp	.-28     	; 0xb4c <__fp_split3+0xe>
 b68:	46 95       	lsr	r20
 b6a:	f1 df       	rcall	.-30     	; 0xb4e <__fp_splitA>
 b6c:	08 c0       	rjmp	.+16     	; 0xb7e <__fp_splitA+0x30>
 b6e:	16 16       	cp	r1, r22
 b70:	17 06       	cpc	r1, r23
 b72:	18 06       	cpc	r1, r24
 b74:	99 1f       	adc	r25, r25
 b76:	f1 cf       	rjmp	.-30     	; 0xb5a <__fp_splitA+0xc>
 b78:	86 95       	lsr	r24
 b7a:	71 05       	cpc	r23, r1
 b7c:	61 05       	cpc	r22, r1
 b7e:	08 94       	sec
 b80:	08 95       	ret

00000b82 <__fp_zero>:
 b82:	e8 94       	clt

00000b84 <__fp_szero>:
 b84:	bb 27       	eor	r27, r27
 b86:	66 27       	eor	r22, r22
 b88:	77 27       	eor	r23, r23
 b8a:	cb 01       	movw	r24, r22
 b8c:	97 f9       	bld	r25, 7
 b8e:	08 95       	ret

00000b90 <__mulsf3>:
 b90:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3x>
 b94:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_round>
 b98:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_pscA>
 b9c:	38 f0       	brcs	.+14     	; 0xbac <__mulsf3+0x1c>
 b9e:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_pscB>
 ba2:	20 f0       	brcs	.+8      	; 0xbac <__mulsf3+0x1c>
 ba4:	95 23       	and	r25, r21
 ba6:	11 f0       	breq	.+4      	; 0xbac <__mulsf3+0x1c>
 ba8:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_inf>
 bac:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_nan>
 bb0:	11 24       	eor	r1, r1
 bb2:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_szero>

00000bb6 <__mulsf3x>:
 bb6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_split3>
 bba:	70 f3       	brcs	.-36     	; 0xb98 <__mulsf3+0x8>

00000bbc <__mulsf3_pse>:
 bbc:	95 9f       	mul	r25, r21
 bbe:	c1 f3       	breq	.-16     	; 0xbb0 <__mulsf3+0x20>
 bc0:	95 0f       	add	r25, r21
 bc2:	50 e0       	ldi	r21, 0x00	; 0
 bc4:	55 1f       	adc	r21, r21
 bc6:	62 9f       	mul	r22, r18
 bc8:	f0 01       	movw	r30, r0
 bca:	72 9f       	mul	r23, r18
 bcc:	bb 27       	eor	r27, r27
 bce:	f0 0d       	add	r31, r0
 bd0:	b1 1d       	adc	r27, r1
 bd2:	63 9f       	mul	r22, r19
 bd4:	aa 27       	eor	r26, r26
 bd6:	f0 0d       	add	r31, r0
 bd8:	b1 1d       	adc	r27, r1
 bda:	aa 1f       	adc	r26, r26
 bdc:	64 9f       	mul	r22, r20
 bde:	66 27       	eor	r22, r22
 be0:	b0 0d       	add	r27, r0
 be2:	a1 1d       	adc	r26, r1
 be4:	66 1f       	adc	r22, r22
 be6:	82 9f       	mul	r24, r18
 be8:	22 27       	eor	r18, r18
 bea:	b0 0d       	add	r27, r0
 bec:	a1 1d       	adc	r26, r1
 bee:	62 1f       	adc	r22, r18
 bf0:	73 9f       	mul	r23, r19
 bf2:	b0 0d       	add	r27, r0
 bf4:	a1 1d       	adc	r26, r1
 bf6:	62 1f       	adc	r22, r18
 bf8:	83 9f       	mul	r24, r19
 bfa:	a0 0d       	add	r26, r0
 bfc:	61 1d       	adc	r22, r1
 bfe:	22 1f       	adc	r18, r18
 c00:	74 9f       	mul	r23, r20
 c02:	33 27       	eor	r19, r19
 c04:	a0 0d       	add	r26, r0
 c06:	61 1d       	adc	r22, r1
 c08:	23 1f       	adc	r18, r19
 c0a:	84 9f       	mul	r24, r20
 c0c:	60 0d       	add	r22, r0
 c0e:	21 1d       	adc	r18, r1
 c10:	82 2f       	mov	r24, r18
 c12:	76 2f       	mov	r23, r22
 c14:	6a 2f       	mov	r22, r26
 c16:	11 24       	eor	r1, r1
 c18:	9f 57       	subi	r25, 0x7F	; 127
 c1a:	50 40       	sbci	r21, 0x00	; 0
 c1c:	9a f0       	brmi	.+38     	; 0xc44 <__mulsf3_pse+0x88>
 c1e:	f1 f0       	breq	.+60     	; 0xc5c <__mulsf3_pse+0xa0>
 c20:	88 23       	and	r24, r24
 c22:	4a f0       	brmi	.+18     	; 0xc36 <__mulsf3_pse+0x7a>
 c24:	ee 0f       	add	r30, r30
 c26:	ff 1f       	adc	r31, r31
 c28:	bb 1f       	adc	r27, r27
 c2a:	66 1f       	adc	r22, r22
 c2c:	77 1f       	adc	r23, r23
 c2e:	88 1f       	adc	r24, r24
 c30:	91 50       	subi	r25, 0x01	; 1
 c32:	50 40       	sbci	r21, 0x00	; 0
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__mulsf3_pse+0x64>
 c36:	9e 3f       	cpi	r25, 0xFE	; 254
 c38:	51 05       	cpc	r21, r1
 c3a:	80 f0       	brcs	.+32     	; 0xc5c <__mulsf3_pse+0xa0>
 c3c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_inf>
 c40:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_szero>
 c44:	5f 3f       	cpi	r21, 0xFF	; 255
 c46:	e4 f3       	brlt	.-8      	; 0xc40 <__mulsf3_pse+0x84>
 c48:	98 3e       	cpi	r25, 0xE8	; 232
 c4a:	d4 f3       	brlt	.-12     	; 0xc40 <__mulsf3_pse+0x84>
 c4c:	86 95       	lsr	r24
 c4e:	77 95       	ror	r23
 c50:	67 95       	ror	r22
 c52:	b7 95       	ror	r27
 c54:	f7 95       	ror	r31
 c56:	e7 95       	ror	r30
 c58:	9f 5f       	subi	r25, 0xFF	; 255
 c5a:	c1 f7       	brne	.-16     	; 0xc4c <__mulsf3_pse+0x90>
 c5c:	fe 2b       	or	r31, r30
 c5e:	88 0f       	add	r24, r24
 c60:	91 1d       	adc	r25, r1
 c62:	96 95       	lsr	r25
 c64:	87 95       	ror	r24
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
