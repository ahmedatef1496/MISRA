
LED Sequence V3.0 MISRA compliant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800066  00800066  00000e32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f0  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f91  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00004484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b5  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001070  00000000  00000000  000052b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_1>
   8:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_2>
   c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 01 	call	0x312	; 0x312 <main>
  8a:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_leds_mode>:

void set_leds_mode (void)
{
    static u16 leds_mode=0;

    if (leds_mode==7)
  92:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  96:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  9a:	87 30       	cpi	r24, 0x07	; 7
  9c:	91 05       	cpc	r25, r1
  9e:	99 f4       	brne	.+38     	; 0xc6 <set_leds_mode+0x34>
    {
        CLR_BIT(gu8BlinkingLedSMode,leds_mode);
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	a9 01       	movw	r20, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <set_leds_mode+0x1a>
  a8:	44 0f       	add	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <set_leds_mode+0x16>
  b0:	ca 01       	movw	r24, r20
  b2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu8BlinkingLedSMode>
  b6:	80 95       	com	r24
  b8:	89 23       	and	r24, r25
  ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8BlinkingLedSMode>
        leds_mode=0;
  be:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
  c2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
    }

    if ( leds_mode<=3)
  c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  ca:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	91 05       	cpc	r25, r1
  d2:	80 f4       	brcc	.+32     	; 0xf4 <set_leds_mode+0x62>
    {
        gu8BlinkingLedSMode|=(1<<(4+leds_mode));
  d4:	ac 01       	movw	r20, r24
  d6:	4c 5f       	subi	r20, 0xFC	; 252
  d8:	5f 4f       	sbci	r21, 0xFF	; 255
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <set_leds_mode+0x52>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	4a 95       	dec	r20
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <set_leds_mode+0x4e>
  e8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <gu8BlinkingLedSMode>
  ec:	23 2b       	or	r18, r19
  ee:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <gu8BlinkingLedSMode>
  f2:	11 c0       	rjmp	.+34     	; 0x116 <set_leds_mode+0x84>



    }
    else if ( leds_mode>3)
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	70 f0       	brcs	.+28     	; 0x116 <set_leds_mode+0x84>
    {
        CLR_BIT(gu8BlinkingLedSMode,leds_mode);
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	08 2e       	mov	r0, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <set_leds_mode+0x74>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <set_leds_mode+0x70>
 10a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <gu8BlinkingLedSMode>
 10e:	20 95       	com	r18
 110:	23 23       	and	r18, r19
 112:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <gu8BlinkingLedSMode>
    }

    leds_mode++;
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 11c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 120:	08 95       	ret

00000122 <app_init>:



void app_init(void)
{
    GLOBALE_ENABLE();
 122:	78 94       	sei
    TIMER0_Init(TIMER0_NORMAL_MODE);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMER0_Init>
    TIMER0_OV_InterruptEnable();
 12a:	0e 94 57 04 	call	0x8ae	; 0x8ae <TIMER0_OV_InterruptEnable>
    TIMER0_OV_SetCallBack(BlinkFlag);
 12e:	81 e8       	ldi	r24, 0x81	; 129
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 00 04 	call	0x800	; 0x800 <TIMER0_OV_SetCallBack>
    LED_init(LED1);
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_init>
    LED_init(LED2);
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_init>
    LED_init(LED3);
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_init>
    LED_init(LED4);
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_init>
    BUTTON_init(PC,button1); //change blinking seq
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 41 01 	call	0x282	; 0x282 <BUTTON_init>
    BUTTON_init(PB,button2); //change led seq
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 41 01 	call	0x282	; 0x282 <BUTTON_init>
    EXI_Enable(EX_INT2);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 c5 02 	call	0x58a	; 0x58a <EXI_Enable>
    EXI_TriggerEdge(EX_INT2,RISING_EDGE);
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 d7 02 	call	0x5ae	; 0x5ae <EXI_TriggerEdge>
    EXI_SetCallBack(EX_INT2,set_leds_mode);
 16c:	69 e4       	ldi	r22, 0x49	; 73
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 37 03 	call	0x66e	; 0x66e <EXI_SetCallBack>

    PORTB=0;
 176:	18 ba       	out	0x18, r1	; 24
 178:	08 95       	ret

0000017a <LEDSModeCheck>:


}

void LEDSModeCheck ()
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	1f 92       	push	r1
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
    u8 states;
    BUTTON_read(PC,button1,&states);
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 4e 01 	call	0x29c	; 0x29c <BUTTON_read>
    if (states==HIGH)
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	81 f4       	brne	.+32     	; 0x1b8 <LEDSModeCheck+0x3e>
    {
        gu8BlinkingTimeMode++;
 198:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu8BlinkingTimeMode>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gu8BlinkingTimeMode>

        while(states==HIGH)
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <LEDSModeCheck+0x38>
        {
            BUTTON_read(PC,button1,&states);
 1a4:	ae 01       	movw	r20, r28
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 4e 01 	call	0x29c	; 0x29c <BUTTON_read>
    BUTTON_read(PC,button1,&states);
    if (states==HIGH)
    {
        gu8BlinkingTimeMode++;

        while(states==HIGH)
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	b1 f3       	breq	.-20     	; 0x1a4 <LEDSModeCheck+0x2a>
        {
            BUTTON_read(PC,button1,&states);
        }
    }
}
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <set_blinking_t_mode>:
}


void set_blinking_t_mode (void)
{
    LEDSModeCheck();
 1c0:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDSModeCheck>
    switch (gu8BlinkingTimeMode)
 1c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu8BlinkingTimeMode>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	09 f1       	breq	.+66     	; 0x20e <set_blinking_t_mode+0x4e>
 1cc:	28 f4       	brcc	.+10     	; 0x1d8 <set_blinking_t_mode+0x18>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <set_blinking_t_mode+0x22>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	89 f0       	breq	.+34     	; 0x1f8 <set_blinking_t_mode+0x38>
 1d6:	3a c0       	rjmp	.+116    	; 0x24c <set_blinking_t_mode+0x8c>
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	21 f1       	breq	.+72     	; 0x224 <set_blinking_t_mode+0x64>
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	59 f1       	breq	.+86     	; 0x236 <set_blinking_t_mode+0x76>
 1e0:	35 c0       	rjmp	.+106    	; 0x24c <set_blinking_t_mode+0x8c>
    {
    case 1:{
        gstrBLINKINGCFG.ton  = 100;
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	91 83       	std	Z+1, r25	; 0x01
 1ec:	80 83       	st	Z, r24
        gstrBLINKINGCFG.toff = 900;   
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	93 e0       	ldi	r25, 0x03	; 3
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
        break;
 1f6:	08 95       	ret
		   }
    case 2:{
        gstrBLINKINGCFG.ton  = 200;
 1f8:	e0 e6       	ldi	r30, 0x60	; 96
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	88 ec       	ldi	r24, 0xC8	; 200
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	91 83       	std	Z+1, r25	; 0x01
 202:	80 83       	st	Z, r24
        gstrBLINKINGCFG.toff = 800; 
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	93 83       	std	Z+3, r25	; 0x03
 20a:	82 83       	std	Z+2, r24	; 0x02
        break;
 20c:	08 95       	ret
	       }
    case 3:{
        gstrBLINKINGCFG.ton  = 300;
 20e:	e0 e6       	ldi	r30, 0x60	; 96
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	8c e2       	ldi	r24, 0x2C	; 44
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	80 83       	st	Z, r24
        gstrBLINKINGCFG.toff = 700;  
 21a:	8c eb       	ldi	r24, 0xBC	; 188
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	93 83       	std	Z+3, r25	; 0x03
 220:	82 83       	std	Z+2, r24	; 0x02
        break;
 222:	08 95       	ret
	       }
    case 4:{
        gstrBLINKINGCFG.ton  = 500;
 224:	e0 e6       	ldi	r30, 0x60	; 96
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	84 ef       	ldi	r24, 0xF4	; 244
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	80 83       	st	Z, r24
        gstrBLINKINGCFG.toff = 500;  
 230:	93 83       	std	Z+3, r25	; 0x03
 232:	82 83       	std	Z+2, r24	; 0x02
        break;
 234:	08 95       	ret
	       }
    case 5:{
        gstrBLINKINGCFG.ton  = 800;
 236:	e0 e6       	ldi	r30, 0x60	; 96
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
        gstrBLINKINGCFG.toff = 200;  
 242:	88 ec       	ldi	r24, 0xC8	; 200
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	93 83       	std	Z+3, r25	; 0x03
 248:	82 83       	std	Z+2, r24	; 0x02
        break;
 24a:	08 95       	ret
	       }
    default:{
        gstrBLINKINGCFG.ton  = 100;
 24c:	e0 e6       	ldi	r30, 0x60	; 96
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	91 83       	std	Z+1, r25	; 0x01
 256:	80 83       	st	Z, r24
        gstrBLINKINGCFG.toff = 900;
 258:	84 e8       	ldi	r24, 0x84	; 132
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	93 83       	std	Z+3, r25	; 0x03
 25e:	82 83       	std	Z+2, r24	; 0x02
        gu8BlinkingTimeMode=1 ;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gu8BlinkingTimeMode>
 266:	08 95       	ret

00000268 <app_start_v3>:


void app_start_v3 (void)
{

        LEDS_blink(gu8BlinkingLedSMode,gstrBLINKINGCFG.ton,gstrBLINKINGCFG.toff);
 268:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8BlinkingLedSMode>
 26c:	e0 e6       	ldi	r30, 0x60	; 96
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	42 81       	ldd	r20, Z+2	; 0x02
 272:	53 81       	ldd	r21, Z+3	; 0x03
 274:	60 81       	ld	r22, Z
 276:	71 81       	ldd	r23, Z+1	; 0x01
 278:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LEDS_blink>
        set_blinking_t_mode();
 27c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <set_blinking_t_mode>
 280:	08 95       	ret

00000282 <BUTTON_init>:
 #include "button.h"
en_buttonError_t BUTTON_init( DIO_Port_type port, u8 u8_PinNumber)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (u8_PinNumber <PIN_MAX && port<PORT_MAX)
 282:	68 30       	cpi	r22, 0x08	; 8
 284:	38 f4       	brcc	.+14     	; 0x294 <BUTTON_init+0x12>
 286:	84 30       	cpi	r24, 0x04	; 4
 288:	38 f4       	brcc	.+14     	; 0x298 <BUTTON_init+0x16>
	{    
				DIO_InitPin(port,u8_PinNumber,INFREE);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_InitPin>
				error = BUTTON_OK;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret
	}
	else
	{
              error = WRONG_BUTTON_PIN;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	08 95       	ret
 298:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
}
 29a:	08 95       	ret

0000029c <BUTTON_read>:

en_buttonError_t BUTTON_read(DIO_Port_type port, u8 u8_PinNumber , DIO_PinVoltage_type *buttonState)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (u8_PinNumber <PIN_MAX && port<PORT_MAX)
 29c:	68 30       	cpi	r22, 0x08	; 8
 29e:	30 f4       	brcc	.+12     	; 0x2ac <BUTTON_read+0x10>
 2a0:	84 30       	cpi	r24, 0x04	; 4
 2a2:	30 f4       	brcc	.+12     	; 0x2b0 <BUTTON_read+0x14>
	{
		DIO_ReadPin(port,u8_PinNumber,buttonState);
 2a4:	0e 94 87 02 	call	0x50e	; 0x50e <DIO_ReadPin>
		error = BUTTON_OK;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
	}
	else
	{
		error = WRONG_BUTTON_PIN;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	08 95       	ret
 2b0:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
} 
 2b2:	08 95       	ret

000002b4 <LED_init>:
{
    DIO_WritePin( LEDS_Port, LED_N,LOW);	
}
void LED_toggel (u8 LED_N)
{
	DIO_TogglePin(LEDS_Port,LED_N);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	68 2f       	mov	r22, r24
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_InitPin>
 2be:	08 95       	ret

000002c0 <LEDS_blink>:
}

void LEDS_blink( u8 ledS_PINS , u16 on_t, u16 off_t)
{  
	if (gblink_state==1&&ledS_PINS>0)
 2c0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <gblink_state>
 2c4:	91 30       	cpi	r25, 0x01	; 1
 2c6:	79 f4       	brne	.+30     	; 0x2e6 <LEDS_blink+0x26>
 2c8:	88 23       	and	r24, r24
 2ca:	69 f0       	breq	.+26     	; 0x2e6 <LEDS_blink+0x26>
	{    
			PORTB = ledS_PINS;
 2cc:	88 bb       	out	0x18, r24	; 24
			TimerDelayAsych(on_t);
 2ce:	cb 01       	movw	r24, r22
 2d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <TimerDelayAsych>
			timer_start(TIMER0_SCALER_64);
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <timer_start>
			gblink_state++;
 2da:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gblink_state>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gblink_state>
 2e4:	08 95       	ret
	}
   else if(gblink_state==3)
 2e6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <gblink_state>
 2ea:	93 30       	cpi	r25, 0x03	; 3
 2ec:	49 f4       	brne	.+18     	; 0x300 <LEDS_blink+0x40>
   {
	PORTB=0;
 2ee:	18 ba       	out	0x18, r1	; 24
	TimerDelayAsych(off_t);
 2f0:	ca 01       	movw	r24, r20
 2f2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <TimerDelayAsych>
	timer_start(TIMER0_SCALER_64);
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <timer_start>
	gblink_state=0;
 2fc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <gblink_state>
 300:	08 95       	ret

00000302 <BlinkFlag>:
} 

void BlinkFlag()
{  
	
	gblink_state++;
 302:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gblink_state>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gblink_state>
	timer0_stop();
 30c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <timer0_stop>
 310:	08 95       	ret

00000312 <main>:


int main(void)
{ 
	
    app_init();
 312:	0e 94 91 00 	call	0x122	; 0x122 <app_init>
	    while(1)
	    {
    app_start_v3();
 316:	0e 94 34 01 	call	0x268	; 0x268 <app_start_v3>
 31a:	fd cf       	rjmp	.-6      	; 0x316 <main+0x4>

0000031c <DIO_InitPin>:
	    else
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;
    }
 31c:	68 30       	cpi	r22, 0x08	; 8
 31e:	08 f0       	brcs	.+2      	; 0x322 <DIO_InitPin+0x6>
 320:	ec c0       	rjmp	.+472    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 322:	41 30       	cpi	r20, 0x01	; 1
 324:	09 f4       	brne	.+2      	; 0x328 <DIO_InitPin+0xc>
 326:	51 c0       	rjmp	.+162    	; 0x3ca <DIO_InitPin+0xae>
 328:	20 f0       	brcs	.+8      	; 0x332 <DIO_InitPin+0x16>
 32a:	42 30       	cpi	r20, 0x02	; 2
 32c:	09 f4       	brne	.+2      	; 0x330 <DIO_InitPin+0x14>
 32e:	99 c0       	rjmp	.+306    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 330:	e6 c0       	rjmp	.+460    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	b9 f0       	breq	.+46     	; 0x364 <DIO_InitPin+0x48>
 336:	28 f0       	brcs	.+10     	; 0x342 <DIO_InitPin+0x26>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	29 f1       	breq	.+74     	; 0x386 <DIO_InitPin+0x6a>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	a1 f1       	breq	.+104    	; 0x3a8 <DIO_InitPin+0x8c>
 340:	e0 c0       	rjmp	.+448    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 342:	2a b3       	in	r18, 0x1a	; 26
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_InitPin+0x32>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_InitPin+0x2e>
 352:	92 2f       	mov	r25, r18
 354:	98 2b       	or	r25, r24
 356:	9a bb       	out	0x1a, r25	; 26
 358:	9b b3       	in	r25, 0x1b	; 27
 35a:	80 95       	com	r24
 35c:	89 23       	and	r24, r25
 35e:	8b bb       	out	0x1b, r24	; 27
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	27 b3       	in	r18, 0x17	; 23
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_InitPin+0x54>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_InitPin+0x50>
 374:	92 2f       	mov	r25, r18
 376:	98 2b       	or	r25, r24
 378:	97 bb       	out	0x17, r25	; 23
 37a:	98 b3       	in	r25, 0x18	; 24
 37c:	80 95       	com	r24
 37e:	89 23       	and	r24, r25
 380:	88 bb       	out	0x18, r24	; 24
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
 386:	24 b3       	in	r18, 0x14	; 20
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_InitPin+0x76>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_InitPin+0x72>
 396:	92 2f       	mov	r25, r18
 398:	98 2b       	or	r25, r24
 39a:	94 bb       	out	0x14, r25	; 20
 39c:	95 b3       	in	r25, 0x15	; 21
 39e:	80 95       	com	r24
 3a0:	89 23       	and	r24, r25
 3a2:	85 bb       	out	0x15, r24	; 21
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
 3a8:	21 b3       	in	r18, 0x11	; 17
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_InitPin+0x98>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_InitPin+0x94>
 3b8:	92 2f       	mov	r25, r18
 3ba:	98 2b       	or	r25, r24
 3bc:	91 bb       	out	0x11, r25	; 17
 3be:	92 b3       	in	r25, 0x12	; 18
 3c0:	80 95       	com	r24
 3c2:	89 23       	and	r24, r25
 3c4:	82 bb       	out	0x12, r24	; 18
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	b9 f0       	breq	.+46     	; 0x3fc <DIO_InitPin+0xe0>
 3ce:	28 f0       	brcs	.+10     	; 0x3da <DIO_InitPin+0xbe>
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	29 f1       	breq	.+74     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	a1 f1       	breq	.+104    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3d8:	96 c0       	rjmp	.+300    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 3da:	2a b3       	in	r18, 0x1a	; 26
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_InitPin+0xca>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_InitPin+0xc6>
 3ea:	80 95       	com	r24
 3ec:	92 2f       	mov	r25, r18
 3ee:	98 23       	and	r25, r24
 3f0:	9a bb       	out	0x1a, r25	; 26
 3f2:	9b b3       	in	r25, 0x1b	; 27
 3f4:	89 23       	and	r24, r25
 3f6:	8b bb       	out	0x1b, r24	; 27
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
 3fc:	27 b3       	in	r18, 0x17	; 23
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	80 95       	com	r24
 40e:	92 2f       	mov	r25, r18
 410:	98 23       	and	r25, r24
 412:	97 bb       	out	0x17, r25	; 23
 414:	98 b3       	in	r25, 0x18	; 24
 416:	89 23       	and	r24, r25
 418:	88 bb       	out	0x18, r24	; 24
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret
 41e:	24 b3       	in	r18, 0x14	; 20
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	80 95       	com	r24
 430:	92 2f       	mov	r25, r18
 432:	98 23       	and	r25, r24
 434:	94 bb       	out	0x14, r25	; 20
 436:	95 b3       	in	r25, 0x15	; 21
 438:	89 23       	and	r24, r25
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	21 b3       	in	r18, 0x11	; 17
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	92 2f       	mov	r25, r18
 454:	98 23       	and	r25, r24
 456:	91 bb       	out	0x11, r25	; 17
 458:	92 b3       	in	r25, 0x12	; 18
 45a:	89 23       	and	r24, r25
 45c:	82 bb       	out	0x12, r24	; 18
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	b9 f0       	breq	.+46     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 466:	28 f0       	brcs	.+10     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	29 f1       	breq	.+74     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 46c:	83 30       	cpi	r24, 0x03	; 3
 46e:	a1 f1       	breq	.+104    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 470:	4c c0       	rjmp	.+152    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 472:	2a b3       	in	r18, 0x1a	; 26
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	98 2f       	mov	r25, r24
 484:	90 95       	com	r25
 486:	92 23       	and	r25, r18
 488:	9a bb       	out	0x1a, r25	; 26
 48a:	9b b3       	in	r25, 0x1b	; 27
 48c:	89 2b       	or	r24, r25
 48e:	8b bb       	out	0x1b, r24	; 27
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	08 95       	ret
 494:	27 b3       	in	r18, 0x17	; 23
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	98 2f       	mov	r25, r24
 4a6:	90 95       	com	r25
 4a8:	92 23       	and	r25, r18
 4aa:	97 bb       	out	0x17, r25	; 23
 4ac:	98 b3       	in	r25, 0x18	; 24
 4ae:	89 2b       	or	r24, r25
 4b0:	88 bb       	out	0x18, r24	; 24
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
 4b6:	24 b3       	in	r18, 0x14	; 20
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	98 2f       	mov	r25, r24
 4c8:	90 95       	com	r25
 4ca:	92 23       	and	r25, r18
 4cc:	94 bb       	out	0x14, r25	; 20
 4ce:	95 b3       	in	r25, 0x15	; 21
 4d0:	89 2b       	or	r24, r25
 4d2:	85 bb       	out	0x15, r24	; 21
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	21 b3       	in	r18, 0x11	; 17
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4e8:	98 2f       	mov	r25, r24
 4ea:	90 95       	com	r25
 4ec:	92 23       	and	r25, r18
 4ee:	91 bb       	out	0x11, r25	; 17
 4f0:	92 b3       	in	r25, 0x12	; 18
 4f2:	89 2b       	or	r24, r25
 4f4:	82 bb       	out	0x12, r24	; 18
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	08 95       	ret
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	08 95       	ret
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	08 95       	ret

0000050e <DIO_ReadPin>:
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
	    if (u8_PinNumber <PIN_MAX )
 50e:	68 30       	cpi	r22, 0x08	; 8
 510:	c0 f5       	brcc	.+112    	; 0x582 <DIO_ReadPin+0x74>
	    {

		    switch(port)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	91 f0       	breq	.+36     	; 0x53a <DIO_ReadPin+0x2c>
 516:	28 f0       	brcs	.+10     	; 0x522 <DIO_ReadPin+0x14>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	d9 f0       	breq	.+54     	; 0x552 <DIO_ReadPin+0x44>
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	29 f1       	breq	.+74     	; 0x56a <DIO_ReadPin+0x5c>
 520:	32 c0       	rjmp	.+100    	; 0x586 <DIO_ReadPin+0x78>
		    {
			    case PA:

			    *volt=READ_BIT(PINA,u8_PinNumber);
 522:	89 b3       	in	r24, 0x19	; 25
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_ReadPin+0x1e>
 528:	95 95       	asr	r25
 52a:	87 95       	ror	r24
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_ReadPin+0x1a>
 530:	81 70       	andi	r24, 0x01	; 1
 532:	fa 01       	movw	r30, r20
 534:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 536:	80 e0       	ldi	r24, 0x00	; 0
		    switch(port)
		    {
			    case PA:

			    *volt=READ_BIT(PINA,u8_PinNumber);
			    break;
 538:	08 95       	ret
			    case PB:

			    *volt=READ_BIT(PINB,u8_PinNumber);
 53a:	86 b3       	in	r24, 0x16	; 22
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_ReadPin+0x36>
 540:	95 95       	asr	r25
 542:	87 95       	ror	r24
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_ReadPin+0x32>
 548:	81 70       	andi	r24, 0x01	; 1
 54a:	fa 01       	movw	r30, r20
 54c:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 54e:	80 e0       	ldi	r24, 0x00	; 0
			    *volt=READ_BIT(PINA,u8_PinNumber);
			    break;
			    case PB:

			    *volt=READ_BIT(PINB,u8_PinNumber);
			    break;
 550:	08 95       	ret
			    case PC:

			    *volt=READ_BIT(PINC,u8_PinNumber);
 552:	83 b3       	in	r24, 0x13	; 19
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_ReadPin+0x4e>
 558:	95 95       	asr	r25
 55a:	87 95       	ror	r24
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_ReadPin+0x4a>
 560:	81 70       	andi	r24, 0x01	; 1
 562:	fa 01       	movw	r30, r20
 564:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 566:	80 e0       	ldi	r24, 0x00	; 0
			    *volt=READ_BIT(PINB,u8_PinNumber);
			    break;
			    case PC:

			    *volt=READ_BIT(PINC,u8_PinNumber);
			    break;
 568:	08 95       	ret
			    case PD:

			    *volt=READ_BIT(PIND,u8_PinNumber);
 56a:	80 b3       	in	r24, 0x10	; 16
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_ReadPin+0x66>
 570:	95 95       	asr	r25
 572:	87 95       	ror	r24
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_ReadPin+0x62>
 578:	81 70       	andi	r24, 0x01	; 1
 57a:	fa 01       	movw	r30, r20
 57c:	80 83       	st	Z, r24
	    }
	    return error;
    }
    en_dioError_t  DIO_ReadPin  (DIO_Port_type port, u8 u8_PinNumber,DIO_PinVoltage_type *volt)
    {
	    en_dioError_t error = DIO_OK;
 57e:	80 e0       	ldi	r24, 0x00	; 0
			    *volt=READ_BIT(PINC,u8_PinNumber);
			    break;
			    case PD:

			    *volt=READ_BIT(PIND,u8_PinNumber);
			    break;
 580:	08 95       	ret
		    }

	    }
	    else
	    {
		    error = WRONG_PinNumber;
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	08 95       	ret
			    case PD:

			    *volt=READ_BIT(PIND,u8_PinNumber);
			    break;
			    default:
			    error = WRONG_PortNumber;
 586:	81 e0       	ldi	r24, 0x01	; 1
	    else
	    {
		    error = WRONG_PinNumber;
	    }
	    return error;
    }
 588:	08 95       	ret

0000058a <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	41 f0       	breq	.+16     	; 0x59e <EXI_Enable+0x14>
 58e:	18 f0       	brcs	.+6      	; 0x596 <EXI_Enable+0xc>
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	49 f0       	breq	.+18     	; 0x5a6 <EXI_Enable+0x1c>
 594:	08 95       	ret
 596:	8b b7       	in	r24, 0x3b	; 59
 598:	80 64       	ori	r24, 0x40	; 64
 59a:	8b bf       	out	0x3b, r24	; 59
 59c:	08 95       	ret
 59e:	8b b7       	in	r24, 0x3b	; 59
 5a0:	80 68       	ori	r24, 0x80	; 128
 5a2:	8b bf       	out	0x3b, r24	; 59
 5a4:	08 95       	ret
 5a6:	8b b7       	in	r24, 0x3b	; 59
 5a8:	80 62       	ori	r24, 0x20	; 32
 5aa:	8b bf       	out	0x3b, r24	; 59
 5ac:	08 95       	ret

000005ae <EXI_TriggerEdge>:
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	49 f1       	breq	.+82     	; 0x604 <EXI_TriggerEdge+0x56>
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <EXI_TriggerEdge+0xe>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	09 f4       	brne	.+2      	; 0x5ba <EXI_TriggerEdge+0xc>
 5b8:	49 c0       	rjmp	.+146    	; 0x64c <EXI_TriggerEdge+0x9e>
 5ba:	08 95       	ret
 5bc:	61 30       	cpi	r22, 0x01	; 1
 5be:	69 f0       	breq	.+26     	; 0x5da <EXI_TriggerEdge+0x2c>
 5c0:	28 f0       	brcs	.+10     	; 0x5cc <EXI_TriggerEdge+0x1e>
 5c2:	62 30       	cpi	r22, 0x02	; 2
 5c4:	89 f0       	breq	.+34     	; 0x5e8 <EXI_TriggerEdge+0x3a>
 5c6:	63 30       	cpi	r22, 0x03	; 3
 5c8:	b1 f0       	breq	.+44     	; 0x5f6 <EXI_TriggerEdge+0x48>
 5ca:	08 95       	ret
 5cc:	85 b7       	in	r24, 0x35	; 53
 5ce:	8e 7f       	andi	r24, 0xFE	; 254
 5d0:	85 bf       	out	0x35, r24	; 53
 5d2:	85 b7       	in	r24, 0x35	; 53
 5d4:	8d 7f       	andi	r24, 0xFD	; 253
 5d6:	85 bf       	out	0x35, r24	; 53
 5d8:	08 95       	ret
 5da:	85 b7       	in	r24, 0x35	; 53
 5dc:	81 60       	ori	r24, 0x01	; 1
 5de:	85 bf       	out	0x35, r24	; 53
 5e0:	85 b7       	in	r24, 0x35	; 53
 5e2:	8d 7f       	andi	r24, 0xFD	; 253
 5e4:	85 bf       	out	0x35, r24	; 53
 5e6:	08 95       	ret
 5e8:	85 b7       	in	r24, 0x35	; 53
 5ea:	8e 7f       	andi	r24, 0xFE	; 254
 5ec:	85 bf       	out	0x35, r24	; 53
 5ee:	85 b7       	in	r24, 0x35	; 53
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	85 bf       	out	0x35, r24	; 53
 5f4:	08 95       	ret
 5f6:	85 b7       	in	r24, 0x35	; 53
 5f8:	81 60       	ori	r24, 0x01	; 1
 5fa:	85 bf       	out	0x35, r24	; 53
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	82 60       	ori	r24, 0x02	; 2
 600:	85 bf       	out	0x35, r24	; 53
 602:	08 95       	ret
 604:	61 30       	cpi	r22, 0x01	; 1
 606:	69 f0       	breq	.+26     	; 0x622 <EXI_TriggerEdge+0x74>
 608:	28 f0       	brcs	.+10     	; 0x614 <EXI_TriggerEdge+0x66>
 60a:	62 30       	cpi	r22, 0x02	; 2
 60c:	89 f0       	breq	.+34     	; 0x630 <EXI_TriggerEdge+0x82>
 60e:	63 30       	cpi	r22, 0x03	; 3
 610:	b1 f0       	breq	.+44     	; 0x63e <EXI_TriggerEdge+0x90>
 612:	08 95       	ret
 614:	85 b7       	in	r24, 0x35	; 53
 616:	8b 7f       	andi	r24, 0xFB	; 251
 618:	85 bf       	out	0x35, r24	; 53
 61a:	85 b7       	in	r24, 0x35	; 53
 61c:	87 7f       	andi	r24, 0xF7	; 247
 61e:	85 bf       	out	0x35, r24	; 53
 620:	08 95       	ret
 622:	85 b7       	in	r24, 0x35	; 53
 624:	84 60       	ori	r24, 0x04	; 4
 626:	85 bf       	out	0x35, r24	; 53
 628:	85 b7       	in	r24, 0x35	; 53
 62a:	87 7f       	andi	r24, 0xF7	; 247
 62c:	85 bf       	out	0x35, r24	; 53
 62e:	08 95       	ret
 630:	85 b7       	in	r24, 0x35	; 53
 632:	8b 7f       	andi	r24, 0xFB	; 251
 634:	85 bf       	out	0x35, r24	; 53
 636:	85 b7       	in	r24, 0x35	; 53
 638:	88 60       	ori	r24, 0x08	; 8
 63a:	85 bf       	out	0x35, r24	; 53
 63c:	08 95       	ret
 63e:	85 b7       	in	r24, 0x35	; 53
 640:	84 60       	ori	r24, 0x04	; 4
 642:	85 bf       	out	0x35, r24	; 53
 644:	85 b7       	in	r24, 0x35	; 53
 646:	88 60       	ori	r24, 0x08	; 8
 648:	85 bf       	out	0x35, r24	; 53
 64a:	08 95       	ret
 64c:	62 30       	cpi	r22, 0x02	; 2
 64e:	19 f0       	breq	.+6      	; 0x656 <EXI_TriggerEdge+0xa8>
 650:	63 30       	cpi	r22, 0x03	; 3
 652:	29 f0       	breq	.+10     	; 0x65e <EXI_TriggerEdge+0xb0>
 654:	08 c0       	rjmp	.+16     	; 0x666 <EXI_TriggerEdge+0xb8>
 656:	84 b7       	in	r24, 0x34	; 52
 658:	8f 7b       	andi	r24, 0xBF	; 191
 65a:	84 bf       	out	0x34, r24	; 52
 65c:	08 95       	ret
 65e:	84 b7       	in	r24, 0x34	; 52
 660:	80 64       	ori	r24, 0x40	; 64
 662:	84 bf       	out	0x34, r24	; 52
 664:	08 95       	ret
 666:	84 b7       	in	r24, 0x34	; 52
 668:	8f 7b       	andi	r24, 0xBF	; 191
 66a:	84 bf       	out	0x34, r24	; 52
 66c:	08 95       	ret

0000066e <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	49 f0       	breq	.+18     	; 0x684 <EXI_SetCallBack+0x16>
 672:	18 f0       	brcs	.+6      	; 0x67a <EXI_SetCallBack+0xc>
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	59 f0       	breq	.+22     	; 0x68e <EXI_SetCallBack+0x20>
 678:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 67a:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <INT0_Fptr+0x1>
 67e:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <INT0_Fptr>
		break;
 682:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 684:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <INT1_Fptr+0x1>
 688:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <INT1_Fptr>
		break;
 68c:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 68e:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <INT2_Fptr+0x1>
 692:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <INT2_Fptr>
 696:	08 95       	ret

00000698 <__vector_1>:




ISR(INT0_vect)
{  
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 6ba:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <INT0_Fptr>
 6be:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <INT0_Fptr+0x1>
 6c2:	30 97       	sbiw	r30, 0x00	; 0
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <__vector_1+0x30>
	{
		INT0_Fptr();
 6c6:	09 95       	icall
	}
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__vector_2>:
ISR(INT1_vect)
{
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
 6f4:	2f 93       	push	r18
 6f6:	3f 93       	push	r19
 6f8:	4f 93       	push	r20
 6fa:	5f 93       	push	r21
 6fc:	6f 93       	push	r22
 6fe:	7f 93       	push	r23
 700:	8f 93       	push	r24
 702:	9f 93       	push	r25
 704:	af 93       	push	r26
 706:	bf 93       	push	r27
 708:	ef 93       	push	r30
 70a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 70c:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <INT1_Fptr>
 710:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <INT1_Fptr+0x1>
 714:	30 97       	sbiw	r30, 0x00	; 0
 716:	09 f0       	breq	.+2      	; 0x71a <__vector_2+0x30>
	{
		INT1_Fptr();
 718:	09 95       	icall
	}
}
 71a:	ff 91       	pop	r31
 71c:	ef 91       	pop	r30
 71e:	bf 91       	pop	r27
 720:	af 91       	pop	r26
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	7f 91       	pop	r23
 728:	6f 91       	pop	r22
 72a:	5f 91       	pop	r21
 72c:	4f 91       	pop	r20
 72e:	3f 91       	pop	r19
 730:	2f 91       	pop	r18
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__vector_3>:
ISR(INT2_vect)
{
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	2f 93       	push	r18
 748:	3f 93       	push	r19
 74a:	4f 93       	push	r20
 74c:	5f 93       	push	r21
 74e:	6f 93       	push	r22
 750:	7f 93       	push	r23
 752:	8f 93       	push	r24
 754:	9f 93       	push	r25
 756:	af 93       	push	r26
 758:	bf 93       	push	r27
 75a:	ef 93       	push	r30
 75c:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 75e:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <INT2_Fptr>
 762:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <INT2_Fptr+0x1>
 766:	30 97       	sbiw	r30, 0x00	; 0
 768:	09 f0       	breq	.+2      	; 0x76c <__vector_3+0x30>
	{
		INT2_Fptr();
 76a:	09 95       	icall
	}
}
 76c:	ff 91       	pop	r31
 76e:	ef 91       	pop	r30
 770:	bf 91       	pop	r27
 772:	af 91       	pop	r26
 774:	9f 91       	pop	r25
 776:	8f 91       	pop	r24
 778:	7f 91       	pop	r23
 77a:	6f 91       	pop	r22
 77c:	5f 91       	pop	r21
 77e:	4f 91       	pop	r20
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <TIMER0_Init>:
{
    SET_BIT(TIMSK,OCIE0);
}
void TIMER0_OC_InterruptDisable(void)
{
    CLR_BIT(TIMSK,OCIE0);
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	71 f0       	breq	.+28     	; 0x7ae <TIMER0_Init+0x20>
 792:	28 f0       	brcs	.+10     	; 0x79e <TIMER0_Init+0x10>
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	99 f0       	breq	.+38     	; 0x7be <TIMER0_Init+0x30>
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	c9 f0       	breq	.+50     	; 0x7ce <TIMER0_Init+0x40>
 79c:	20 c0       	rjmp	.+64     	; 0x7de <TIMER0_Init+0x50>
 79e:	83 b7       	in	r24, 0x33	; 51
 7a0:	8f 7b       	andi	r24, 0xBF	; 191
 7a2:	83 bf       	out	0x33, r24	; 51
 7a4:	83 b7       	in	r24, 0x33	; 51
 7a6:	87 7f       	andi	r24, 0xF7	; 247
 7a8:	83 bf       	out	0x33, r24	; 51
 7aa:	84 e0       	ldi	r24, 0x04	; 4
 7ac:	08 95       	ret
 7ae:	83 b7       	in	r24, 0x33	; 51
 7b0:	80 64       	ori	r24, 0x40	; 64
 7b2:	83 bf       	out	0x33, r24	; 51
 7b4:	83 b7       	in	r24, 0x33	; 51
 7b6:	87 7f       	andi	r24, 0xF7	; 247
 7b8:	83 bf       	out	0x33, r24	; 51
 7ba:	84 e0       	ldi	r24, 0x04	; 4
 7bc:	08 95       	ret
 7be:	83 b7       	in	r24, 0x33	; 51
 7c0:	8f 7b       	andi	r24, 0xBF	; 191
 7c2:	83 bf       	out	0x33, r24	; 51
 7c4:	83 b7       	in	r24, 0x33	; 51
 7c6:	88 60       	ori	r24, 0x08	; 8
 7c8:	83 bf       	out	0x33, r24	; 51
 7ca:	84 e0       	ldi	r24, 0x04	; 4
 7cc:	08 95       	ret
 7ce:	83 b7       	in	r24, 0x33	; 51
 7d0:	80 64       	ori	r24, 0x40	; 64
 7d2:	83 bf       	out	0x33, r24	; 51
 7d4:	83 b7       	in	r24, 0x33	; 51
 7d6:	88 60       	ori	r24, 0x08	; 8
 7d8:	83 bf       	out	0x33, r24	; 51
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	08 95       	ret
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	08 95       	ret

000007e2 <timer_start>:
 7e2:	88 30       	cpi	r24, 0x08	; 8
 7e4:	40 f4       	brcc	.+16     	; 0x7f6 <timer_start+0x14>
 7e6:	93 b7       	in	r25, 0x33	; 51
 7e8:	98 7f       	andi	r25, 0xF8	; 248
 7ea:	93 bf       	out	0x33, r25	; 51
 7ec:	93 b7       	in	r25, 0x33	; 51
 7ee:	89 2b       	or	r24, r25
 7f0:	83 bf       	out	0x33, r24	; 51
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	08 95       	ret
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	08 95       	ret

000007fa <timer0_stop>:
 7fa:	83 b7       	in	r24, 0x33	; 51
 7fc:	13 be       	out	0x33, r1	; 51
 7fe:	08 95       	ret

00000800 <TIMER0_OV_SetCallBack>:
 800:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Timer0_OVF_Fptr+0x1>
 804:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Timer0_OVF_Fptr>
 808:	08 95       	ret

0000080a <__vector_11>:
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
 82c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <counter.1878>
 830:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <counter.1878+0x1>
 834:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <counter.1878+0x2>
 838:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <counter.1878+0x3>
 83c:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <g_overflowsCount>
 840:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <g_overflowsCount+0x1>
 844:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <g_overflowsCount+0x2>
 848:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <g_overflowsCount+0x3>
 84c:	84 17       	cp	r24, r20
 84e:	95 07       	cpc	r25, r21
 850:	a6 07       	cpc	r26, r22
 852:	b7 07       	cpc	r27, r23
 854:	81 f4       	brne	.+32     	; 0x876 <__stack+0x17>
 856:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <counter.1878>
 85a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter.1878+0x1>
 85e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter.1878+0x2>
 862:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <counter.1878+0x3>
 866:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0_OVF_Fptr>
 86a:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0_OVF_Fptr+0x1>
 86e:	30 97       	sbiw	r30, 0x00	; 0
 870:	69 f0       	breq	.+26     	; 0x88c <__stack+0x2d>
 872:	09 95       	icall
 874:	0b c0       	rjmp	.+22     	; 0x88c <__stack+0x2d>
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	a1 1d       	adc	r26, r1
 87a:	b1 1d       	adc	r27, r1
 87c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <counter.1878>
 880:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <counter.1878+0x1>
 884:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <counter.1878+0x2>
 888:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <counter.1878+0x3>
 88c:	ff 91       	pop	r31
 88e:	ef 91       	pop	r30
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <TIMER0_OV_InterruptEnable>:
 8ae:	89 b7       	in	r24, 0x39	; 57
 8b0:	81 60       	ori	r24, 0x01	; 1
 8b2:	89 bf       	out	0x39, r24	; 57
 8b4:	08 95       	ret

000008b6 <TimerDelayAsych>:
}

EN_timerError_t TimerDelayAsych(u16 Delay)
{
 8b6:	8f 92       	push	r8
 8b8:	9f 92       	push	r9
 8ba:	af 92       	push	r10
 8bc:	bf 92       	push	r11
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	ff 92       	push	r15
    double CPU_F = F_CPU;
    double oneTickTime = (TIMER0_SCALER / CPU_F ) * 1000; // in ms
    double maxDelay = oneTickTime * 256; // in ms
    u32 overflowsCount =(u32)((Delay / maxDelay));
 8c6:	bc 01       	movw	r22, r24
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__floatunsisf>
 8d0:	4b 01       	movw	r8, r22
 8d2:	5c 01       	movw	r10, r24
 8d4:	2f e6       	ldi	r18, 0x6F	; 111
 8d6:	32 e1       	ldi	r19, 0x12	; 18
 8d8:	43 e8       	ldi	r20, 0x83	; 131
 8da:	5f e3       	ldi	r21, 0x3F	; 63
 8dc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 8e0:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
 8e4:	6b 01       	movw	r12, r22
 8e6:	7c 01       	movw	r14, r24
    u8 timerInitValue;
    if (overflowsCount > 1)
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	c8 16       	cp	r12, r24
 8ec:	d1 04       	cpc	r13, r1
 8ee:	e1 04       	cpc	r14, r1
 8f0:	f1 04       	cpc	r15, r1
 8f2:	28 f1       	brcs	.+74     	; 0x93e <TimerDelayAsych+0x88>
    {
        timerInitValue = (u8)(256 - ((Delay - (maxDelay * (overflowsCount - 1))) / oneTickTime));
 8f4:	c7 01       	movw	r24, r14
 8f6:	b6 01       	movw	r22, r12
 8f8:	61 50       	subi	r22, 0x01	; 1
 8fa:	71 09       	sbc	r23, r1
 8fc:	81 09       	sbc	r24, r1
 8fe:	91 09       	sbc	r25, r1
 900:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__floatunsisf>
 904:	2f e6       	ldi	r18, 0x6F	; 111
 906:	32 e1       	ldi	r19, 0x12	; 18
 908:	43 e8       	ldi	r20, 0x83	; 131
 90a:	5f e3       	ldi	r21, 0x3F	; 63
 90c:	0e 94 5d 06 	call	0xcba	; 0xcba <__mulsf3>
 910:	9b 01       	movw	r18, r22
 912:	ac 01       	movw	r20, r24
 914:	c5 01       	movw	r24, r10
 916:	b4 01       	movw	r22, r8
 918:	0e 94 c1 04 	call	0x982	; 0x982 <__subsf3>
 91c:	2f e6       	ldi	r18, 0x6F	; 111
 91e:	32 e1       	ldi	r19, 0x12	; 18
 920:	43 e8       	ldi	r20, 0x83	; 131
 922:	5b e3       	ldi	r21, 0x3B	; 59
 924:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 928:	9b 01       	movw	r18, r22
 92a:	ac 01       	movw	r20, r24
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	80 e8       	ldi	r24, 0x80	; 128
 932:	93 e4       	ldi	r25, 0x43	; 67
 934:	0e 94 c1 04 	call	0x982	; 0x982 <__subsf3>
 938:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
 93c:	10 c0       	rjmp	.+32     	; 0x95e <TimerDelayAsych+0xa8>
    }
    else
    {
        timerInitValue = (u8)((maxDelay - Delay)/oneTickTime);
 93e:	a5 01       	movw	r20, r10
 940:	94 01       	movw	r18, r8
 942:	6f e6       	ldi	r22, 0x6F	; 111
 944:	72 e1       	ldi	r23, 0x12	; 18
 946:	83 e8       	ldi	r24, 0x83	; 131
 948:	9f e3       	ldi	r25, 0x3F	; 63
 94a:	0e 94 c1 04 	call	0x982	; 0x982 <__subsf3>
 94e:	2f e6       	ldi	r18, 0x6F	; 111
 950:	32 e1       	ldi	r19, 0x12	; 18
 952:	43 e8       	ldi	r20, 0x83	; 131
 954:	5b e3       	ldi	r21, 0x3B	; 59
 956:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 95a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
    }
    TCNT0 = timerInitValue;
 95e:	62 bf       	out	0x32, r22	; 50

    g_overflowsCount=overflowsCount;
 960:	c0 92 73 00 	sts	0x0073, r12	; 0x800073 <g_overflowsCount>
 964:	d0 92 74 00 	sts	0x0074, r13	; 0x800074 <g_overflowsCount+0x1>
 968:	e0 92 75 00 	sts	0x0075, r14	; 0x800075 <g_overflowsCount+0x2>
 96c:	f0 92 76 00 	sts	0x0076, r15	; 0x800076 <g_overflowsCount+0x3>


}
 970:	ff 90       	pop	r15
 972:	ef 90       	pop	r14
 974:	df 90       	pop	r13
 976:	cf 90       	pop	r12
 978:	bf 90       	pop	r11
 97a:	af 90       	pop	r10
 97c:	9f 90       	pop	r9
 97e:	8f 90       	pop	r8
 980:	08 95       	ret

00000982 <__subsf3>:
 982:	50 58       	subi	r21, 0x80	; 128

00000984 <__addsf3>:
 984:	bb 27       	eor	r27, r27
 986:	aa 27       	eor	r26, r26
 988:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__addsf3x>
 98c:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_round>
 990:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_pscA>
 994:	38 f0       	brcs	.+14     	; 0x9a4 <__addsf3+0x20>
 996:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fp_pscB>
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__addsf3+0x20>
 99c:	39 f4       	brne	.+14     	; 0x9ac <__addsf3+0x28>
 99e:	9f 3f       	cpi	r25, 0xFF	; 255
 9a0:	19 f4       	brne	.+6      	; 0x9a8 <__addsf3+0x24>
 9a2:	26 f4       	brtc	.+8      	; 0x9ac <__addsf3+0x28>
 9a4:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_nan>
 9a8:	0e f4       	brtc	.+2      	; 0x9ac <__addsf3+0x28>
 9aa:	e0 95       	com	r30
 9ac:	e7 fb       	bst	r30, 7
 9ae:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_inf>

000009b2 <__addsf3x>:
 9b2:	e9 2f       	mov	r30, r25
 9b4:	0e 94 34 06 	call	0xc68	; 0xc68 <__fp_split3>
 9b8:	58 f3       	brcs	.-42     	; 0x990 <__addsf3+0xc>
 9ba:	ba 17       	cp	r27, r26
 9bc:	62 07       	cpc	r22, r18
 9be:	73 07       	cpc	r23, r19
 9c0:	84 07       	cpc	r24, r20
 9c2:	95 07       	cpc	r25, r21
 9c4:	20 f0       	brcs	.+8      	; 0x9ce <__addsf3x+0x1c>
 9c6:	79 f4       	brne	.+30     	; 0x9e6 <__addsf3x+0x34>
 9c8:	a6 f5       	brtc	.+104    	; 0xa32 <__addsf3x+0x80>
 9ca:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_zero>
 9ce:	0e f4       	brtc	.+2      	; 0x9d2 <__addsf3x+0x20>
 9d0:	e0 95       	com	r30
 9d2:	0b 2e       	mov	r0, r27
 9d4:	ba 2f       	mov	r27, r26
 9d6:	a0 2d       	mov	r26, r0
 9d8:	0b 01       	movw	r0, r22
 9da:	b9 01       	movw	r22, r18
 9dc:	90 01       	movw	r18, r0
 9de:	0c 01       	movw	r0, r24
 9e0:	ca 01       	movw	r24, r20
 9e2:	a0 01       	movw	r20, r0
 9e4:	11 24       	eor	r1, r1
 9e6:	ff 27       	eor	r31, r31
 9e8:	59 1b       	sub	r21, r25
 9ea:	99 f0       	breq	.+38     	; 0xa12 <__addsf3x+0x60>
 9ec:	59 3f       	cpi	r21, 0xF9	; 249
 9ee:	50 f4       	brcc	.+20     	; 0xa04 <__addsf3x+0x52>
 9f0:	50 3e       	cpi	r21, 0xE0	; 224
 9f2:	68 f1       	brcs	.+90     	; 0xa4e <__addsf3x+0x9c>
 9f4:	1a 16       	cp	r1, r26
 9f6:	f0 40       	sbci	r31, 0x00	; 0
 9f8:	a2 2f       	mov	r26, r18
 9fa:	23 2f       	mov	r18, r19
 9fc:	34 2f       	mov	r19, r20
 9fe:	44 27       	eor	r20, r20
 a00:	58 5f       	subi	r21, 0xF8	; 248
 a02:	f3 cf       	rjmp	.-26     	; 0x9ea <__addsf3x+0x38>
 a04:	46 95       	lsr	r20
 a06:	37 95       	ror	r19
 a08:	27 95       	ror	r18
 a0a:	a7 95       	ror	r26
 a0c:	f0 40       	sbci	r31, 0x00	; 0
 a0e:	53 95       	inc	r21
 a10:	c9 f7       	brne	.-14     	; 0xa04 <__addsf3x+0x52>
 a12:	7e f4       	brtc	.+30     	; 0xa32 <__addsf3x+0x80>
 a14:	1f 16       	cp	r1, r31
 a16:	ba 0b       	sbc	r27, r26
 a18:	62 0b       	sbc	r22, r18
 a1a:	73 0b       	sbc	r23, r19
 a1c:	84 0b       	sbc	r24, r20
 a1e:	ba f0       	brmi	.+46     	; 0xa4e <__addsf3x+0x9c>
 a20:	91 50       	subi	r25, 0x01	; 1
 a22:	a1 f0       	breq	.+40     	; 0xa4c <__addsf3x+0x9a>
 a24:	ff 0f       	add	r31, r31
 a26:	bb 1f       	adc	r27, r27
 a28:	66 1f       	adc	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	c2 f7       	brpl	.-16     	; 0xa20 <__addsf3x+0x6e>
 a30:	0e c0       	rjmp	.+28     	; 0xa4e <__addsf3x+0x9c>
 a32:	ba 0f       	add	r27, r26
 a34:	62 1f       	adc	r22, r18
 a36:	73 1f       	adc	r23, r19
 a38:	84 1f       	adc	r24, r20
 a3a:	48 f4       	brcc	.+18     	; 0xa4e <__addsf3x+0x9c>
 a3c:	87 95       	ror	r24
 a3e:	77 95       	ror	r23
 a40:	67 95       	ror	r22
 a42:	b7 95       	ror	r27
 a44:	f7 95       	ror	r31
 a46:	9e 3f       	cpi	r25, 0xFE	; 254
 a48:	08 f0       	brcs	.+2      	; 0xa4c <__addsf3x+0x9a>
 a4a:	b0 cf       	rjmp	.-160    	; 0x9ac <__addsf3+0x28>
 a4c:	93 95       	inc	r25
 a4e:	88 0f       	add	r24, r24
 a50:	08 f0       	brcs	.+2      	; 0xa54 <__addsf3x+0xa2>
 a52:	99 27       	eor	r25, r25
 a54:	ee 0f       	add	r30, r30
 a56:	97 95       	ror	r25
 a58:	87 95       	ror	r24
 a5a:	08 95       	ret

00000a5c <__divsf3>:
 a5c:	0e 94 42 05 	call	0xa84	; 0xa84 <__divsf3x>
 a60:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_round>
 a64:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fp_pscB>
 a68:	58 f0       	brcs	.+22     	; 0xa80 <__divsf3+0x24>
 a6a:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_pscA>
 a6e:	40 f0       	brcs	.+16     	; 0xa80 <__divsf3+0x24>
 a70:	29 f4       	brne	.+10     	; 0xa7c <__divsf3+0x20>
 a72:	5f 3f       	cpi	r21, 0xFF	; 255
 a74:	29 f0       	breq	.+10     	; 0xa80 <__divsf3+0x24>
 a76:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_inf>
 a7a:	51 11       	cpse	r21, r1
 a7c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_szero>
 a80:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_nan>

00000a84 <__divsf3x>:
 a84:	0e 94 34 06 	call	0xc68	; 0xc68 <__fp_split3>
 a88:	68 f3       	brcs	.-38     	; 0xa64 <__divsf3+0x8>

00000a8a <__divsf3_pse>:
 a8a:	99 23       	and	r25, r25
 a8c:	b1 f3       	breq	.-20     	; 0xa7a <__divsf3+0x1e>
 a8e:	55 23       	and	r21, r21
 a90:	91 f3       	breq	.-28     	; 0xa76 <__divsf3+0x1a>
 a92:	95 1b       	sub	r25, r21
 a94:	55 0b       	sbc	r21, r21
 a96:	bb 27       	eor	r27, r27
 a98:	aa 27       	eor	r26, r26
 a9a:	62 17       	cp	r22, r18
 a9c:	73 07       	cpc	r23, r19
 a9e:	84 07       	cpc	r24, r20
 aa0:	38 f0       	brcs	.+14     	; 0xab0 <__divsf3_pse+0x26>
 aa2:	9f 5f       	subi	r25, 0xFF	; 255
 aa4:	5f 4f       	sbci	r21, 0xFF	; 255
 aa6:	22 0f       	add	r18, r18
 aa8:	33 1f       	adc	r19, r19
 aaa:	44 1f       	adc	r20, r20
 aac:	aa 1f       	adc	r26, r26
 aae:	a9 f3       	breq	.-22     	; 0xa9a <__divsf3_pse+0x10>
 ab0:	35 d0       	rcall	.+106    	; 0xb1c <__divsf3_pse+0x92>
 ab2:	0e 2e       	mov	r0, r30
 ab4:	3a f0       	brmi	.+14     	; 0xac4 <__divsf3_pse+0x3a>
 ab6:	e0 e8       	ldi	r30, 0x80	; 128
 ab8:	32 d0       	rcall	.+100    	; 0xb1e <__divsf3_pse+0x94>
 aba:	91 50       	subi	r25, 0x01	; 1
 abc:	50 40       	sbci	r21, 0x00	; 0
 abe:	e6 95       	lsr	r30
 ac0:	00 1c       	adc	r0, r0
 ac2:	ca f7       	brpl	.-14     	; 0xab6 <__divsf3_pse+0x2c>
 ac4:	2b d0       	rcall	.+86     	; 0xb1c <__divsf3_pse+0x92>
 ac6:	fe 2f       	mov	r31, r30
 ac8:	29 d0       	rcall	.+82     	; 0xb1c <__divsf3_pse+0x92>
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	bb 1f       	adc	r27, r27
 ad2:	26 17       	cp	r18, r22
 ad4:	37 07       	cpc	r19, r23
 ad6:	48 07       	cpc	r20, r24
 ad8:	ab 07       	cpc	r26, r27
 ada:	b0 e8       	ldi	r27, 0x80	; 128
 adc:	09 f0       	breq	.+2      	; 0xae0 <__divsf3_pse+0x56>
 ade:	bb 0b       	sbc	r27, r27
 ae0:	80 2d       	mov	r24, r0
 ae2:	bf 01       	movw	r22, r30
 ae4:	ff 27       	eor	r31, r31
 ae6:	93 58       	subi	r25, 0x83	; 131
 ae8:	5f 4f       	sbci	r21, 0xFF	; 255
 aea:	3a f0       	brmi	.+14     	; 0xafa <__divsf3_pse+0x70>
 aec:	9e 3f       	cpi	r25, 0xFE	; 254
 aee:	51 05       	cpc	r21, r1
 af0:	78 f0       	brcs	.+30     	; 0xb10 <__divsf3_pse+0x86>
 af2:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_inf>
 af6:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_szero>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	e4 f3       	brlt	.-8      	; 0xaf6 <__divsf3_pse+0x6c>
 afe:	98 3e       	cpi	r25, 0xE8	; 232
 b00:	d4 f3       	brlt	.-12     	; 0xaf6 <__divsf3_pse+0x6c>
 b02:	86 95       	lsr	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	b7 95       	ror	r27
 b0a:	f7 95       	ror	r31
 b0c:	9f 5f       	subi	r25, 0xFF	; 255
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__divsf3_pse+0x78>
 b10:	88 0f       	add	r24, r24
 b12:	91 1d       	adc	r25, r1
 b14:	96 95       	lsr	r25
 b16:	87 95       	ror	r24
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret
 b1c:	e1 e0       	ldi	r30, 0x01	; 1
 b1e:	66 0f       	add	r22, r22
 b20:	77 1f       	adc	r23, r23
 b22:	88 1f       	adc	r24, r24
 b24:	bb 1f       	adc	r27, r27
 b26:	62 17       	cp	r22, r18
 b28:	73 07       	cpc	r23, r19
 b2a:	84 07       	cpc	r24, r20
 b2c:	ba 07       	cpc	r27, r26
 b2e:	20 f0       	brcs	.+8      	; 0xb38 <__divsf3_pse+0xae>
 b30:	62 1b       	sub	r22, r18
 b32:	73 0b       	sbc	r23, r19
 b34:	84 0b       	sbc	r24, r20
 b36:	ba 0b       	sbc	r27, r26
 b38:	ee 1f       	adc	r30, r30
 b3a:	88 f7       	brcc	.-30     	; 0xb1e <__divsf3_pse+0x94>
 b3c:	e0 95       	com	r30
 b3e:	08 95       	ret

00000b40 <__fixunssfsi>:
 b40:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_splitA>
 b44:	88 f0       	brcs	.+34     	; 0xb68 <__fixunssfsi+0x28>
 b46:	9f 57       	subi	r25, 0x7F	; 127
 b48:	98 f0       	brcs	.+38     	; 0xb70 <__fixunssfsi+0x30>
 b4a:	b9 2f       	mov	r27, r25
 b4c:	99 27       	eor	r25, r25
 b4e:	b7 51       	subi	r27, 0x17	; 23
 b50:	b0 f0       	brcs	.+44     	; 0xb7e <__fixunssfsi+0x3e>
 b52:	e1 f0       	breq	.+56     	; 0xb8c <__fixunssfsi+0x4c>
 b54:	66 0f       	add	r22, r22
 b56:	77 1f       	adc	r23, r23
 b58:	88 1f       	adc	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	1a f0       	brmi	.+6      	; 0xb64 <__fixunssfsi+0x24>
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__fixunssfsi+0x14>
 b62:	14 c0       	rjmp	.+40     	; 0xb8c <__fixunssfsi+0x4c>
 b64:	b1 30       	cpi	r27, 0x01	; 1
 b66:	91 f0       	breq	.+36     	; 0xb8c <__fixunssfsi+0x4c>
 b68:	0e 94 56 06 	call	0xcac	; 0xcac <__fp_zero>
 b6c:	b1 e0       	ldi	r27, 0x01	; 1
 b6e:	08 95       	ret
 b70:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_zero>
 b74:	67 2f       	mov	r22, r23
 b76:	78 2f       	mov	r23, r24
 b78:	88 27       	eor	r24, r24
 b7a:	b8 5f       	subi	r27, 0xF8	; 248
 b7c:	39 f0       	breq	.+14     	; 0xb8c <__fixunssfsi+0x4c>
 b7e:	b9 3f       	cpi	r27, 0xF9	; 249
 b80:	cc f3       	brlt	.-14     	; 0xb74 <__fixunssfsi+0x34>
 b82:	86 95       	lsr	r24
 b84:	77 95       	ror	r23
 b86:	67 95       	ror	r22
 b88:	b3 95       	inc	r27
 b8a:	d9 f7       	brne	.-10     	; 0xb82 <__fixunssfsi+0x42>
 b8c:	3e f4       	brtc	.+14     	; 0xb9c <__fixunssfsi+0x5c>
 b8e:	90 95       	com	r25
 b90:	80 95       	com	r24
 b92:	70 95       	com	r23
 b94:	61 95       	neg	r22
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	08 95       	ret

00000b9e <__floatunsisf>:
 b9e:	e8 94       	clt
 ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <__floatsisf+0x12>

00000ba2 <__floatsisf>:
 ba2:	97 fb       	bst	r25, 7
 ba4:	3e f4       	brtc	.+14     	; 0xbb4 <__floatsisf+0x12>
 ba6:	90 95       	com	r25
 ba8:	80 95       	com	r24
 baa:	70 95       	com	r23
 bac:	61 95       	neg	r22
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	99 23       	and	r25, r25
 bb6:	a9 f0       	breq	.+42     	; 0xbe2 <__floatsisf+0x40>
 bb8:	f9 2f       	mov	r31, r25
 bba:	96 e9       	ldi	r25, 0x96	; 150
 bbc:	bb 27       	eor	r27, r27
 bbe:	93 95       	inc	r25
 bc0:	f6 95       	lsr	r31
 bc2:	87 95       	ror	r24
 bc4:	77 95       	ror	r23
 bc6:	67 95       	ror	r22
 bc8:	b7 95       	ror	r27
 bca:	f1 11       	cpse	r31, r1
 bcc:	f8 cf       	rjmp	.-16     	; 0xbbe <__floatsisf+0x1c>
 bce:	fa f4       	brpl	.+62     	; 0xc0e <__floatsisf+0x6c>
 bd0:	bb 0f       	add	r27, r27
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <__floatsisf+0x36>
 bd4:	60 ff       	sbrs	r22, 0
 bd6:	1b c0       	rjmp	.+54     	; 0xc0e <__floatsisf+0x6c>
 bd8:	6f 5f       	subi	r22, 0xFF	; 255
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	16 c0       	rjmp	.+44     	; 0xc0e <__floatsisf+0x6c>
 be2:	88 23       	and	r24, r24
 be4:	11 f0       	breq	.+4      	; 0xbea <__floatsisf+0x48>
 be6:	96 e9       	ldi	r25, 0x96	; 150
 be8:	11 c0       	rjmp	.+34     	; 0xc0c <__floatsisf+0x6a>
 bea:	77 23       	and	r23, r23
 bec:	21 f0       	breq	.+8      	; 0xbf6 <__floatsisf+0x54>
 bee:	9e e8       	ldi	r25, 0x8E	; 142
 bf0:	87 2f       	mov	r24, r23
 bf2:	76 2f       	mov	r23, r22
 bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__floatsisf+0x5e>
 bf6:	66 23       	and	r22, r22
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__floatsisf+0x74>
 bfa:	96 e8       	ldi	r25, 0x86	; 134
 bfc:	86 2f       	mov	r24, r22
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	60 e0       	ldi	r22, 0x00	; 0
 c02:	2a f0       	brmi	.+10     	; 0xc0e <__floatsisf+0x6c>
 c04:	9a 95       	dec	r25
 c06:	66 0f       	add	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	da f7       	brpl	.-10     	; 0xc04 <__floatsisf+0x62>
 c0e:	88 0f       	add	r24, r24
 c10:	96 95       	lsr	r25
 c12:	87 95       	ror	r24
 c14:	97 f9       	bld	r25, 7
 c16:	08 95       	ret

00000c18 <__fp_inf>:
 c18:	97 f9       	bld	r25, 7
 c1a:	9f 67       	ori	r25, 0x7F	; 127
 c1c:	80 e8       	ldi	r24, 0x80	; 128
 c1e:	70 e0       	ldi	r23, 0x00	; 0
 c20:	60 e0       	ldi	r22, 0x00	; 0
 c22:	08 95       	ret

00000c24 <__fp_nan>:
 c24:	9f ef       	ldi	r25, 0xFF	; 255
 c26:	80 ec       	ldi	r24, 0xC0	; 192
 c28:	08 95       	ret

00000c2a <__fp_pscA>:
 c2a:	00 24       	eor	r0, r0
 c2c:	0a 94       	dec	r0
 c2e:	16 16       	cp	r1, r22
 c30:	17 06       	cpc	r1, r23
 c32:	18 06       	cpc	r1, r24
 c34:	09 06       	cpc	r0, r25
 c36:	08 95       	ret

00000c38 <__fp_pscB>:
 c38:	00 24       	eor	r0, r0
 c3a:	0a 94       	dec	r0
 c3c:	12 16       	cp	r1, r18
 c3e:	13 06       	cpc	r1, r19
 c40:	14 06       	cpc	r1, r20
 c42:	05 06       	cpc	r0, r21
 c44:	08 95       	ret

00000c46 <__fp_round>:
 c46:	09 2e       	mov	r0, r25
 c48:	03 94       	inc	r0
 c4a:	00 0c       	add	r0, r0
 c4c:	11 f4       	brne	.+4      	; 0xc52 <__fp_round+0xc>
 c4e:	88 23       	and	r24, r24
 c50:	52 f0       	brmi	.+20     	; 0xc66 <__fp_round+0x20>
 c52:	bb 0f       	add	r27, r27
 c54:	40 f4       	brcc	.+16     	; 0xc66 <__fp_round+0x20>
 c56:	bf 2b       	or	r27, r31
 c58:	11 f4       	brne	.+4      	; 0xc5e <__fp_round+0x18>
 c5a:	60 ff       	sbrs	r22, 0
 c5c:	04 c0       	rjmp	.+8      	; 0xc66 <__fp_round+0x20>
 c5e:	6f 5f       	subi	r22, 0xFF	; 255
 c60:	7f 4f       	sbci	r23, 0xFF	; 255
 c62:	8f 4f       	sbci	r24, 0xFF	; 255
 c64:	9f 4f       	sbci	r25, 0xFF	; 255
 c66:	08 95       	ret

00000c68 <__fp_split3>:
 c68:	57 fd       	sbrc	r21, 7
 c6a:	90 58       	subi	r25, 0x80	; 128
 c6c:	44 0f       	add	r20, r20
 c6e:	55 1f       	adc	r21, r21
 c70:	59 f0       	breq	.+22     	; 0xc88 <__fp_splitA+0x10>
 c72:	5f 3f       	cpi	r21, 0xFF	; 255
 c74:	71 f0       	breq	.+28     	; 0xc92 <__fp_splitA+0x1a>
 c76:	47 95       	ror	r20

00000c78 <__fp_splitA>:
 c78:	88 0f       	add	r24, r24
 c7a:	97 fb       	bst	r25, 7
 c7c:	99 1f       	adc	r25, r25
 c7e:	61 f0       	breq	.+24     	; 0xc98 <__fp_splitA+0x20>
 c80:	9f 3f       	cpi	r25, 0xFF	; 255
 c82:	79 f0       	breq	.+30     	; 0xca2 <__fp_splitA+0x2a>
 c84:	87 95       	ror	r24
 c86:	08 95       	ret
 c88:	12 16       	cp	r1, r18
 c8a:	13 06       	cpc	r1, r19
 c8c:	14 06       	cpc	r1, r20
 c8e:	55 1f       	adc	r21, r21
 c90:	f2 cf       	rjmp	.-28     	; 0xc76 <__fp_split3+0xe>
 c92:	46 95       	lsr	r20
 c94:	f1 df       	rcall	.-30     	; 0xc78 <__fp_splitA>
 c96:	08 c0       	rjmp	.+16     	; 0xca8 <__fp_splitA+0x30>
 c98:	16 16       	cp	r1, r22
 c9a:	17 06       	cpc	r1, r23
 c9c:	18 06       	cpc	r1, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	f1 cf       	rjmp	.-30     	; 0xc84 <__fp_splitA+0xc>
 ca2:	86 95       	lsr	r24
 ca4:	71 05       	cpc	r23, r1
 ca6:	61 05       	cpc	r22, r1
 ca8:	08 94       	sec
 caa:	08 95       	ret

00000cac <__fp_zero>:
 cac:	e8 94       	clt

00000cae <__fp_szero>:
 cae:	bb 27       	eor	r27, r27
 cb0:	66 27       	eor	r22, r22
 cb2:	77 27       	eor	r23, r23
 cb4:	cb 01       	movw	r24, r22
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret

00000cba <__mulsf3>:
 cba:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3x>
 cbe:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_round>
 cc2:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_pscA>
 cc6:	38 f0       	brcs	.+14     	; 0xcd6 <__mulsf3+0x1c>
 cc8:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fp_pscB>
 ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__mulsf3+0x1c>
 cce:	95 23       	and	r25, r21
 cd0:	11 f0       	breq	.+4      	; 0xcd6 <__mulsf3+0x1c>
 cd2:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_inf>
 cd6:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_nan>
 cda:	11 24       	eor	r1, r1
 cdc:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_szero>

00000ce0 <__mulsf3x>:
 ce0:	0e 94 34 06 	call	0xc68	; 0xc68 <__fp_split3>
 ce4:	70 f3       	brcs	.-36     	; 0xcc2 <__mulsf3+0x8>

00000ce6 <__mulsf3_pse>:
 ce6:	95 9f       	mul	r25, r21
 ce8:	c1 f3       	breq	.-16     	; 0xcda <__mulsf3+0x20>
 cea:	95 0f       	add	r25, r21
 cec:	50 e0       	ldi	r21, 0x00	; 0
 cee:	55 1f       	adc	r21, r21
 cf0:	62 9f       	mul	r22, r18
 cf2:	f0 01       	movw	r30, r0
 cf4:	72 9f       	mul	r23, r18
 cf6:	bb 27       	eor	r27, r27
 cf8:	f0 0d       	add	r31, r0
 cfa:	b1 1d       	adc	r27, r1
 cfc:	63 9f       	mul	r22, r19
 cfe:	aa 27       	eor	r26, r26
 d00:	f0 0d       	add	r31, r0
 d02:	b1 1d       	adc	r27, r1
 d04:	aa 1f       	adc	r26, r26
 d06:	64 9f       	mul	r22, r20
 d08:	66 27       	eor	r22, r22
 d0a:	b0 0d       	add	r27, r0
 d0c:	a1 1d       	adc	r26, r1
 d0e:	66 1f       	adc	r22, r22
 d10:	82 9f       	mul	r24, r18
 d12:	22 27       	eor	r18, r18
 d14:	b0 0d       	add	r27, r0
 d16:	a1 1d       	adc	r26, r1
 d18:	62 1f       	adc	r22, r18
 d1a:	73 9f       	mul	r23, r19
 d1c:	b0 0d       	add	r27, r0
 d1e:	a1 1d       	adc	r26, r1
 d20:	62 1f       	adc	r22, r18
 d22:	83 9f       	mul	r24, r19
 d24:	a0 0d       	add	r26, r0
 d26:	61 1d       	adc	r22, r1
 d28:	22 1f       	adc	r18, r18
 d2a:	74 9f       	mul	r23, r20
 d2c:	33 27       	eor	r19, r19
 d2e:	a0 0d       	add	r26, r0
 d30:	61 1d       	adc	r22, r1
 d32:	23 1f       	adc	r18, r19
 d34:	84 9f       	mul	r24, r20
 d36:	60 0d       	add	r22, r0
 d38:	21 1d       	adc	r18, r1
 d3a:	82 2f       	mov	r24, r18
 d3c:	76 2f       	mov	r23, r22
 d3e:	6a 2f       	mov	r22, r26
 d40:	11 24       	eor	r1, r1
 d42:	9f 57       	subi	r25, 0x7F	; 127
 d44:	50 40       	sbci	r21, 0x00	; 0
 d46:	9a f0       	brmi	.+38     	; 0xd6e <__mulsf3_pse+0x88>
 d48:	f1 f0       	breq	.+60     	; 0xd86 <__mulsf3_pse+0xa0>
 d4a:	88 23       	and	r24, r24
 d4c:	4a f0       	brmi	.+18     	; 0xd60 <__mulsf3_pse+0x7a>
 d4e:	ee 0f       	add	r30, r30
 d50:	ff 1f       	adc	r31, r31
 d52:	bb 1f       	adc	r27, r27
 d54:	66 1f       	adc	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	91 50       	subi	r25, 0x01	; 1
 d5c:	50 40       	sbci	r21, 0x00	; 0
 d5e:	a9 f7       	brne	.-22     	; 0xd4a <__mulsf3_pse+0x64>
 d60:	9e 3f       	cpi	r25, 0xFE	; 254
 d62:	51 05       	cpc	r21, r1
 d64:	80 f0       	brcs	.+32     	; 0xd86 <__mulsf3_pse+0xa0>
 d66:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_inf>
 d6a:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_szero>
 d6e:	5f 3f       	cpi	r21, 0xFF	; 255
 d70:	e4 f3       	brlt	.-8      	; 0xd6a <__mulsf3_pse+0x84>
 d72:	98 3e       	cpi	r25, 0xE8	; 232
 d74:	d4 f3       	brlt	.-12     	; 0xd6a <__mulsf3_pse+0x84>
 d76:	86 95       	lsr	r24
 d78:	77 95       	ror	r23
 d7a:	67 95       	ror	r22
 d7c:	b7 95       	ror	r27
 d7e:	f7 95       	ror	r31
 d80:	e7 95       	ror	r30
 d82:	9f 5f       	subi	r25, 0xFF	; 255
 d84:	c1 f7       	brne	.-16     	; 0xd76 <__mulsf3_pse+0x90>
 d86:	fe 2b       	or	r31, r30
 d88:	88 0f       	add	r24, r24
 d8a:	91 1d       	adc	r25, r1
 d8c:	96 95       	lsr	r25
 d8e:	87 95       	ror	r24
 d90:	97 f9       	bld	r25, 7
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
